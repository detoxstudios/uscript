// uScript uScript_Collision.cs
// (C) 2010 Detox Studios LLC

using UnityEngine;
using System.Collections;

[NodePath("Events/Physics Events")]

[NodeCopyright("Copyright 2011 by Detox Studios LLC")]
[NodeToolTip("Fires an event signal when Instance receives a collision.")]
[NodeAuthor("Detox Studios LLC", "http://www.detoxstudios.com")]
[NodeHelp("http://docs.uscript.net/#3-Working_With_uScript/3.4-Nodes.htm")]

[FriendlyName("On Collision", "Fires an event signal when Instance GameObject receives a collision. The GameObjects involved must have rigidbody components on them to fire this event.")]
public class uScript_Collision : uScriptEvent
{
   public delegate void uScriptEventHandler(object sender, CollisionEventArgs args);

   public class CollisionEventArgs : System.EventArgs
   {
      private Collision m_Collision;

      [FriendlyName("Relative Velocity", "The relative linear velocity of the two colliding GameObjects.")]
      [SocketState(false, false)]
      public Vector3 RelativeVelocity { get { return m_Collision.relativeVelocity; } }

      [FriendlyName("Rigid Body", "The rigidbody component of the 'Triggered By' GameObject that caused this event to fire. This is null if the 'Triggered By' GameObject is a collider with no rigidbody attached.")]
      [SocketState(false, false)]
      public Rigidbody RigidBody { get { return m_Collision.rigidbody; } }

      [FriendlyName("Collider", "The collider component of the 'Triggered By' GameObject that caused this event to fire.")]
      [SocketState(false, false)]
      public Collider Collider { get { return m_Collision.collider; } }

      [FriendlyName("Transform", "The transform component of the 'Triggered By' GameObject.")]
      [SocketState(false, false)]
      public Transform Transform { get { return m_Collision.transform; } }

      [FriendlyName("Contact Points", "The contact points generated by the physics engine from the collision.")]
      [SocketState(false, false)]
      public ContactPoint[] Contacts { get { return m_Collision.contacts; } }

      [FriendlyName("Triggered By", "The GameObject that collided with this GameObject (the Instance) and caused the event to fire.")]
      public GameObject GameObject { get { return m_Collision.gameObject; } }

      public CollisionEventArgs(Collision collision)
      {
         m_Collision = collision;
      }
   }

   [FriendlyName("On Collision Enter")]
   public event uScriptEventHandler OnEnterCollision;

   [FriendlyName("On Collision Exit")]
   public event uScriptEventHandler OnExitCollision;

   [FriendlyName("On Collision Stay")]
   public event uScriptEventHandler WhileInsideCollision;
 
   void OnCollisionEnter(Collision collision)
   {
      if ( OnEnterCollision != null ) OnEnterCollision( this, new CollisionEventArgs(collision) ); 
   }

   void OnCollisionExit(Collision collision)
   {
      if ( OnExitCollision != null ) OnExitCollision( this, new CollisionEventArgs(collision) ); 
   }

   void OnCollisionStay(Collision collision)
   {
      if ( WhileInsideCollision != null ) WhileInsideCollision( this, new CollisionEventArgs(collision) ); 
   }
}
