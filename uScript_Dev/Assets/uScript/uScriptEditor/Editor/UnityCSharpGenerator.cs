//#define FREE_PLE_BUILD

using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using UnityEngine;
using UnityEditor;

namespace Detox.ScriptEditor
{
   //how it works with CSharp:
   //each node has inputs, the calling node (the one with the output linked to the input)
   //is responsible for setting that node's input before it calls it
   //the node's input is represented by a variable name which includes that node's id and the input's name
   //having nodes set the input of the next node before it calls it has the effect of trickling down
   //all the correct, and latest values, to that node directly before it is executed
   public class UnityCSharpGenerator
   {
      private const int MaxRelayCallCount = 1000;

      public Parameter []ExternalParameters { get { return m_ExternalParameters.ToArray( ); } }
      public Plug      []ExternalInputs     { get { return m_ExternalInputs.ToArray( ); } }
      public Plug      []ExternalOutputs    { get { return m_ExternalOutputs.ToArray( ); } }
      public Plug      []ExternalEvents     { get { return m_ExternalEvents.ToArray( ); } }
      public string    []Drivens            { get { return m_Drivens.ToArray( ); } }
      public string    []RequiredMethods    { get { return m_RequiredMethods.ToArray( ); } }

      private string       m_CSharpString;
      private bool         m_GenerateDebugInfo;
      private int          m_TabStack;
      private Hashtable    m_GuidToId = new Hashtable( );
      private ScriptEditor m_Script = null;

      List<Parameter> m_ExternalParameters = new List<Parameter>( );
      List<Plug>      m_ExternalInputs     = new List<Plug>( );
      List<Plug>      m_ExternalOutputs    = new List<Plug>( );
      List<Plug>      m_ExternalEvents     = new List<Plug>( );
      List<string>    m_Drivens            = new List<string>( );
      List<string>    m_RequiredMethods    = new List<string>( );

      private void Preprocess( )
      {  
         CreateGuidIndices( );
         CreateGlobalVariables( );
         CreateBidirectionalLinks( );
         PruneUnusedNodes( );
         RemoveOverriddenInstances( );
         ConslidateExternals( );
      }

      //setup all the guids now so 
      //indices are not node order dependent
      private void CreateGuidIndices( )
      {
         foreach ( EntityNode node in m_Script.EntityNodes )
         {
            GetGuidId( node.Guid );
         }
      }

      //short cut method to figure out just the external links/parameters
      //without needing to parse th entire script
      public void ParseExternals( ScriptEditor script )
      {
         m_GenerateDebugInfo = false;
         m_CSharpString = "";
         m_TabStack = 0;

         m_Script = null;

         m_ExternalParameters = new List<Parameter>( );
         m_ExternalInputs     = new List<Plug>( );
         m_ExternalOutputs    = new List<Plug>( );
         m_ExternalEvents     = new List<Plug>( );
         m_Drivens            = new List<string>( );
         m_RequiredMethods    = new List<string>( );

         if ( null != script )
         {
            m_Script = script.Copy( );

            Preprocess( );

            foreach ( ExternalConnection external in m_Script.Externals )
            {
               DefineExternalInput( external );
            }

            Plug []properties = FindExternalOutputProperties( );

            for ( int i = 0; i < properties.Length; i++ )
            {
               m_ExternalOutputs.Add( properties[i] );
            }
            
            Plug []events = FindExternalEvents( );

            if ( events.Length > 0 )
            {
               foreach ( Plug eventPlug in events )
               {
                  m_ExternalEvents.Add( eventPlug );
               }
            }

            DefineExternalDrivens( );

            m_RequiredMethods.Add("Start");
            m_RequiredMethods.Add("Update");

            if ( true == NeedsMethod("LateUpdate") )
            {
               m_RequiredMethods.Add("LateUpdate");
            }

            if ( true == NeedsMethod("FixedUpdate") )
            {
               m_RequiredMethods.Add("FixedUpdate");
            }
         }
      }

      private void CreateBidirectionalLinks( )
      {
         List<LinkNode> newLinks = new List<LinkNode>( );

         //go through all connections and make duplicate links going the other way
         //if they can be bi-directional
         foreach ( LinkNode link in m_Script.Links )
         {
            EntityNode source = m_Script.GetNode( link.Source.Guid );
            EntityNode dest   = m_Script.GetNode( link.Destination.Guid );

            Parameter sourceParam = Parameter.Empty, destParam = Parameter.Empty;

            foreach ( Parameter p in source.Parameters )
            {
               if ( p.Name == link.Source.Anchor )
               {
                  sourceParam = p;
                  break;
               }
            }

            foreach ( Parameter p in dest.Parameters )
            {
               if ( p.Name == link.Destination.Anchor )
               {
                  destParam = p;
                  break;
               }
            }

            bool cloneLink = false;

            if ( sourceParam != Parameter.Empty && destParam != Parameter.Empty )
            {
               if ( sourceParam.Input == true &&
                    destParam.Output  == true )
               {
                  cloneLink = true;
               }
            }
            else
            {
               if ( source is ExternalConnection && destParam != Parameter.Empty )
               {
                  if ( destParam.Output == true )
                  {
                     cloneLink = true;
                  }
               }
               else if ( dest is ExternalConnection && sourceParam != Parameter.Empty )
               {
                  if ( sourceParam.Input == true )
                  {
                     cloneLink = true;
                  }
               }
            }

            if ( true == cloneLink )
            {
               LinkNode clone    = link;
               clone.Guid        = Guid.NewGuid( );
               clone.Source      = link.Destination;
               clone.Destination = link.Source;

               LinkNode outNode;
               if ( false == FindLink(clone.Source.Guid, clone.Source.Anchor, clone.Destination.Guid, clone.Destination.Anchor, out outNode) )
               {
                  newLinks.Add( clone );
               }
            }
         }

         foreach ( LinkNode link in newLinks )
         {
            m_Script.AddNode( link );
         }
      }

      private void ConslidateExternals( )
      {
         ExternalConnection []externals = m_Script.Externals;
         Hashtable unique = new Hashtable( );

         //build lists, keyed by external name
         //so we can consolidate all the links to the same external
         foreach ( ExternalConnection external in externals )
         {
            if ( null == unique[external.Name.Default] )
            {
               unique[ external.Name.Default ] = new List<ExternalConnection>( );
            }

            List<ExternalConnection> list = unique[ external.Name.Default ] as List<ExternalConnection>;
            list.Add( external );
         }

         //for each external list...
         foreach ( object o in unique.Values )
         {
            List<ExternalConnection> list = o as List<ExternalConnection>;

            //the first one in the list is where we will consolidate
            ExternalConnection external = list[ 0 ];

            //every subsequent one, replace the links with the links to the consolidated one
            //and then remove the subsequent one (which will also remove its links)
            for ( int i = 1; i < list.Count; i++ )
            {
               ExternalConnection e = list[ i ];

               LinkNode [] sources = FindLinksBySource( e.Guid, e.Connection );         
               LinkNode [] dests   = FindLinksByDestination( e.Guid, e.Connection );   

               m_Script.RemoveNode( e );

               foreach ( LinkNode source in sources )
               {
                  LinkNode clone = source;
                  clone.Source.Guid = external.Guid;

                  m_Script.AddNode( clone );
               }
 
               foreach ( LinkNode dest in dests )
               {
                  LinkNode clone = dest;
                  clone.Destination.Guid = external.Guid;

                  m_Script.AddNode( clone );
               }
            }
         }
      }

      private void CreateGlobalVariables( )
      {
         //find any local variables which have no name
         //and give them their unique id as the name
         //this way they are individual instances
         LocalNode [] locals = m_Script.UniqueLocals;

         foreach ( LocalNode local in locals )
         {
            if ( "" == local.Name.Default )
            {
               LocalNode unique = new LocalNode( "" + GetGuidId(local.Guid), local.Value.Type, local.Value.Default );
               unique.Guid = local.Guid;

               //replace existing local
               m_Script.AddNode( unique );
            }
         }
      }

      private void PruneUnusedNodes( )
      {         
         //first prune out any nodes which don't have valid instances
         foreach ( EntityNode entityNode in m_Script.EntityNodes )
         {
            //if it doesn't need an instance, don't worry about finding one
            if ( false == entityNode is EntityProperty &&
                 false == entityNode is EntityEvent &&
                 false == entityNode is EntityMethod ) continue;


            //an instance set in the property grid?
            if ( entityNode.Instance.Default != "" ) continue;

            //include static nodes which don't need an instance
            if ( true == entityNode.IsStatic ) continue;

            bool includeNode = false;

            //how about an instance linked to it?
            LinkNode []instanceLinks = FindLinksByDestination( entityNode.Guid, entityNode.Instance.Name );
            
            foreach ( LinkNode link in instanceLinks )
            {
               EntityNode node = m_Script.GetNode( link.Source.Guid );
               
               if ( node is LocalNode )
               {
                  if ( ((LocalNode)node).Instance.Default != "" )
                  {
                     includeNode = true;
                     break;
                  }
               }
               else if ( node is OwnerConnection || node is ExternalConnection )
               {
                  includeNode = true;
               }
            }

            if ( false == includeNode )
            {
               instanceLinks = FindLinksBySource( entityNode.Guid, entityNode.Instance.Name );
            
               foreach ( LinkNode link in instanceLinks )
               {
                  LocalNode node = (LocalNode) m_Script.GetNode( link.Destination.Guid );

                  if ( node.Instance.Default != "" )
                  {
                     includeNode = true;
                     break;
                  }
               }
            }

            //no valid instance, so remove it
            if ( false == includeNode )
            {
               string name = uScriptConfig.Variable.FriendlyName( entityNode.Instance.Type );

               uScriptDebug.Log( "Node " + name + " is being pruned because there is no GameObject instance assigned to it", uScriptDebug.Type.Debug );
               m_Script.RemoveNode( entityNode );
            }
         }



         //now that we have removed all the nodes
         //which don't have valid instances assigned
         //track all the nodes which have links to them
         //and remove everything else

         //track all the link source / destination nodes
         Hashtable usedNodes = new Hashtable( );

         foreach ( LinkNode link in m_Script.Links )
         {
            usedNodes[ link.Source.Guid ] = true;
            usedNodes[ link.Destination.Guid ] = true;
            usedNodes[ link.Guid ] = true;
         }

         //prune any nodes which aren't linked
         foreach ( EntityNode entityNode in m_Script.EntityNodes )
         {
            if ( false == usedNodes.Contains(entityNode.Guid) )
            {
               m_Script.RemoveNode( entityNode );
            }
         }
      }

      private void RemoveOverriddenInstances( )
      {
         //first prune out any nodes which don't have valid instances
         EntityNode []nodes = m_Script.EntityNodes;

         foreach ( EntityNode entityNode in nodes )
         {
            //if it doesn't need an instance, don't worry about finding one
            if ( false == entityNode is EntityProperty &&
                 false == entityNode is EntityEvent &&
                 false == entityNode is EntityMethod ) continue;


            //no instance? then don't worry about it
            if ( entityNode.Instance.Default == "" ) continue;

            //how about an instance linked to it?
            LinkNode []instanceLinks = FindLinksByDestination( entityNode.Guid, entityNode.Instance.Name );
            
            if ( instanceLinks.Length > 0 )
            {
               Parameter p = entityNode.Instance;
               p.Default = "";
               entityNode.Instance = p;
               m_Script.AddNode( entityNode );
            }
         }
      }


      private bool FindLink(Guid sourceGuid, string sourceAnchor, Guid destGuid, string destAnchor, out LinkNode outNode)
      {
         foreach ( LinkNode link in m_Script.Links )
         {
            if ( link.Source.Guid        == sourceGuid   &&
                 link.Source.Anchor      == sourceAnchor &&
                 link.Destination.Guid   == destGuid     &&
                 link.Destination.Anchor == destAnchor )
            {
               outNode = link;
               return true;
            }
         }

         outNode = new LinkNode( );
         return false;
      }

      public string GenerateGameObjectScript(string logicClassName, ScriptEditor script)
      {
         m_GenerateDebugInfo = false;
         m_CSharpString = "";
         m_TabStack = 0;

         m_Script = null;

         if ( null != script )
         {
            m_Script = script.Copy( );

            DeclareNamespaces( );
            AddCSharpLine( "" );

            AddCSharpLine( "[AddComponentMenu(\"uScript/Graphs/" + logicClassName + "\")]" );
            AddCSharpLine( "public class " + System.IO.Path.GetFileNameWithoutExtension(script.Name) + uScriptConfig.Files.GeneratedComponentExtension + " : uScriptCode" );
            AddCSharpLine( "{" );
            ++m_TabStack;

               #if FREE_PLE_BUILD
                  // This created the Texture2D variable and stores the watermark bytes in string format created by the watermark tool
                  AddCSharpLine( "private Texture2D WatermarkTexture;" );
                  AddCSharpLine( "private string TexBytes = \"137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,1,0,0,0,0,64,8,6,0,0,0,245,93,169,190,0,0,0,9,112,72,89,115,0,0,23,18,0,0,23,18,1,103,159,210,82,0,0,10,79,105,67,67,80,80,104,111,116,111,115,104,111,112,32,73,67,67,32,112,114,111,102,105,108,101,0,0,120,218,157,83,103,84,83,233,22,61,247,222,244,66,75,136,128,148,75,111,82,21,8,32,82,66,139,128,20,145,38,42,33,9,16,74,136,33,161,217,21,81,193,17,69,69,4,27,200,160,136,3,142,142,128,140,21,81,44,12,138,10,216,7,228,33,162,142,131,163,136,138,202,251,225,123,163,107,214,188,247,230,205,254,181,215,62,231,172,243,157,179,207,7,192,8,12,150,72,51,81,53,128,12,169,66,30,17,224,131,199,196,198,225,228,46,64,129,10,36,112,0,16,8,179,100,33,115,253,35,1,0,248,126,60,60,43,34,192,7,190,0,1,120,211,11,8,0,192,77,155,192,48,28,135,255,15,234,66,153,92,1,128,132,1,192,116,145,56,75,8,128,20,0,64,122,142,66,166,0,64,70,1,128,157,152,38,83,0,160,4,0,96,203,99,98,227,0,80,45,0,96,39,127,230,211,0,128,157,248,153,123,1,0,91,148,33,21,1,160,145,0,32,19,101,136,68,0,104,59,0,172,207,86,138,69,0,88,48,0,20,102,75,196,57,0,216,45,0,48,73,87,102,72,0,176,183,0,192,206,16,11,178,0,8,12,0,48,81,136,133,41,0,4,123,0,96,200,35,35,120,0,132,153,0,20,70,242,87,60,241,43,174,16,231,42,0,0,120,153,178,60,185,36,57,69,129,91,8,45,113,7,87,87,46,30,40,206,73,23,43,20,54,97,2,97,154,64,46,194,121,153,25,50,129,52,15,224,243,204,0,0,160,145,21,17,224,131,243,253,120,206,14,174,206,206,54,142,182,14,95,45,234,191,6,255,34,98,98,227,254,229,207,171,112,64,0,0,225,116,126,209,254,44,47,179,26,128,59,6,128,109,254,162,37,238,4,104,94,11,160,117,247,139,102,178,15,64,181,0,160,233,218,87,243,112,248,126,60,60,69,161,144,185,217,217,229,228,228,216,74,196,66,91,97,202,87,125,254,103,194,95,192,87,253,108,249,126,60,252,247,245,224,190,226,36,129,50,93,129,71,4,248,224,194,204,244,76,165,28,207,146,9,132,98,220,230,143,71,252,183,11,255,252,29,211,34,196,73,98,185,88,42,20,227,81,18,113,142,68,154,140,243,50,165,34,137,66,146,41,197,37,210,255,100,226,223,44,251,3,62,223,53,0,176,106,62,1,123,145,45,168,93,99,3,246,75,39,16,88,116,192,226,247,0,0,242,187,111,193,212,40,8,3,128,104,131,225,207,119,255,239,63,253,71,160,37,0,128,102,73,146,113,0,0,94,68,36,46,84,202,179,63,199,8,0,0,68,160,129,42,176,65,27,244,193,24,44,192,6,28,193,5,220,193,11,252,96,54,132,66,36,196,194,66,16,66,10,100,128,28,114,96,41,172,130,66,40,134,205,176,29,42,96,47,212,64,29,52,192,81,104,134,147,112,14,46,194,85,184,14,61,112,15,250,97,8,158,193,40,188,129,9,4,65,200,8,19,97,33,218,136,1,98,138,88,35,142,8,23,153,133,248,33,193,72,4,18,139,36,32,201,136,20,81,34,75,145,53,72,49,82,138,84,32,85,72,29,242,61,114,2,57,135,92,70,186,145,59,200,0,50,130,252,134,188,71,49,148,129,178,81,61,212,12,181,67,185,168,55,26,132,70,162,11,208,100,116,49,154,143,22,160,155,208,114,180,26,61,140,54,161,231,208,171,104,15,218,143,62,67,199,48,192,232,24,7,51,196,108,48,46,198,195,66,177,56,44,9,147,99,203,177,34,172,12,171,198,26,176,86,172,3,187,137,245,99,207,177,119,4,18,129,69,192,9,54,4,119,66,32,97,30,65,72,88,76,88,78,216,72,168,32,28,36,52,17,218,9,55,9,3,132,81,194,39,34,147,168,75,180,38,186,17,249,196,24,98,50,49,135,88,72,44,35,214,18,143,19,47,16,123,136,67,196,55,36,18,137,67,50,39,185,144,2,73,177,164,84,210,18,210,70,210,110,82,35,233,44,169,155,52,72,26,35,147,201,218,100,107,178,7,57,148,44,32,43,200,133,228,157,228,195,228,51,228,27,228,33,242,91,10,157,98,64,113,164,248,83,226,40,82,202,106,74,25,229,16,229,52,229,6,101,152,50,65,85,163,154,82,221,168,161,84,17,53,143,90,66,173,161,182,82,175,81,135,168,19,52,117,154,57,205,131,22,73,75,165,173,162,149,211,26,104,23,104,247,105,175,232,116,186,17,221,149,30,78,151,208,87,210,203,233,71,232,151,232,3,244,119,12,13,134,21,131,199,136,103,40,25,155,24,7,24,103,25,119,24,175,152,76,166,25,211,139,25,199,84,48,55,49,235,152,231,153,15,153,111,85,88,42,182,42,124,21,145,202,10,149,74,149,38,149,27,42,47,84,169,170,166,170,222,170,11,85,243,85,203,84,143,169,94,83,125,174,70,85,51,83,227,169,9,212,150,171,85,170,157,80,235,83,27,83,103,169,59,168,135,170,103,168,111,84,63,164,126,89,253,137,6,89,195,76,195,79,67,164,81,160,177,95,227,188,198,32,11,99,25,179,120,44,33,107,13,171,134,117,129,53,196,38,177,205,217,124,118,42,187,152,253,29,187,139,61,170,169,161,57,67,51,74,51,87,179,82,243,148,102,63,7,227,152,113,248,156,116,78,9,231,40,167,151,243,126,138,222,20,239,41,226,41,27,166,52,76,185,49,101,92,107,170,150,151,150,88,171,72,171,81,171,71,235,189,54,174,237,167,157,166,189,69,187,89,251,129,14,65,199,74,39,92,39,71,103,143,206,5,157,231,83,217,83,221,167,10,167,22,77,61,58,245,174,46,170,107,165,27,161,187,68,119,191,110,167,238,152,158,190,94,128,158,76,111,167,222,121,189,231,250,28,125,47,253,84,253,109,250,167,245,71,12,88,6,179,12,36,6,219,12,206,24,60,197,53,113,111,60,29,47,199,219,241,81,67,93,195,64,67,165,97,149,97,151,225,132,145,185,209,60,163,213,70,141,70,15,140,105,198,92,227,36,227,109,198,109,198,163,38,6,38,33,38,75,77,234,77,238,154,82,77,185,166,41,166,59,76,59,76,199,205,204,205,162,205,214,153,53,155,61,49,215,50,231,155,231,155,215,155,223,183,96,90,120,90,44,182,168,182,184,101,73,178,228,90,166,89,238,182,188,110,133,90,57,89,165,88,85,90,93,179,70,173,157,173,37,214,187,173,187,167,17,167,185,78,147,78,171,158,214,103,195,176,241,182,201,182,169,183,25,176,229,216,6,219,174,182,109,182,125,97,103,98,23,103,183,197,174,195,238,147,189,147,125,186,125,141,253,61,7,13,135,217,14,171,29,90,29,126,115,180,114,20,58,86,58,222,154,206,156,238,63,125,197,244,150,233,47,103,88,207,16,207,216,51,227,182,19,203,41,196,105,157,83,155,211,71,103,23,103,185,115,131,243,136,139,137,75,130,203,46,151,62,46,155,27,198,221,200,189,228,74,116,245,113,93,225,122,210,245,157,155,179,155,194,237,168,219,175,238,54,238,105,238,135,220,159,204,52,159,41,158,89,51,115,208,195,200,67,224,81,229,209,63,11,159,149,48,107,223,172,126,79,67,79,129,103,181,231,35,47,99,47,145,87,173,215,176,183,165,119,170,247,97,239,23,62,246,62,114,159,227,62,227,60,55,222,50,222,89,95,204,55,192,183,200,183,203,79,195,111,158,95,133,223,67,127,35,255,100,255,122,255,209,0,167,128,37,1,103,3,137,129,65,129,91,2,251,248,122,124,33,191,142,63,58,219,101,246,178,217,237,65,140,160,185,65,21,65,143,130,173,130,229,193,173,33,104,200,236,144,173,33,247,231,152,206,145,206,105,14,133,80,126,232,214,208,7,97,230,97,139,195,126,12,39,133,135,133,87,134,63,142,112,136,88,26,209,49,151,53,119,209,220,67,115,223,68,250,68,150,68,222,155,103,49,79,57,175,45,74,53,42,62,170,46,106,60,218,55,186,52,186,63,198,46,102,89,204,213,88,157,88,73,108,75,28,57,46,42,174,54,110,108,190,223,252,237,243,135,226,157,226,11,227,123,23,152,47,200,93,112,121,161,206,194,244,133,167,22,169,46,18,44,58,150,64,76,136,78,56,148,240,65,16,42,168,22,140,37,242,19,119,37,142,10,121,194,29,194,103,34,47,209,54,209,136,216,67,92,42,30,78,242,72,42,77,122,146,236,145,188,53,121,36,197,51,165,44,229,185,132,39,169,144,188,76,13,76,221,155,58,158,22,154,118,32,109,50,61,58,189,49,131,146,145,144,113,66,170,33,77,147,182,103,234,103,230,102,118,203,172,101,133,178,254,197,110,139,183,47,30,149,7,201,107,179,144,172,5,89,45,10,182,66,166,232,84,90,40,215,42,7,178,103,101,87,102,191,205,137,202,57,150,171,158,43,205,237,204,179,202,219,144,55,156,239,159,255,237,18,194,18,225,146,182,165,134,75,87,45,29,88,230,189,172,106,57,178,60,113,121,219,10,227,21,5,43,134,86,6,172,60,184,138,182,42,109,213,79,171,237,87,151,174,126,189,38,122,77,107,129,94,193,202,130,193,181,1,107,235,11,85,10,229,133,125,235,220,215,237,93,79,88,47,89,223,181,97,250,134,157,27,62,21,137,138,174,20,219,23,151,21,127,216,40,220,120,229,27,135,111,202,191,153,220,148,180,169,171,196,185,100,207,102,210,102,233,230,222,45,158,91,14,150,170,151,230,151,14,110,13,217,218,180,13,223,86,180,237,245,246,69,219,47,151,205,40,219,187,131,182,67,185,163,191,60,184,188,101,167,201,206,205,59,63,84,164,84,244,84,250,84,54,238,210,221,181,97,215,248,110,209,238,27,123,188,246,52,236,213,219,91,188,247,253,62,201,190,219,85,1,85,77,213,102,213,101,251,73,251,179,247,63,174,137,170,233,248,150,251,109,93,173,78,109,113,237,199,3,210,3,253,7,35,14,182,215,185,212,213,29,210,61,84,82,143,214,43,235,71,14,199,31,190,254,157,239,119,45,13,54,13,85,141,156,198,226,35,112,68,121,228,233,247,9,223,247,30,13,58,218,118,140,123,172,225,7,211,31,118,29,103,29,47,106,66,154,242,154,70,155,83,154,251,91,98,91,186,79,204,62,209,214,234,222,122,252,71,219,31,15,156,52,60,89,121,74,243,84,201,105,218,233,130,211,147,103,242,207,140,157,149,157,125,126,46,249,220,96,219,162,182,123,231,99,206,223,106,15,111,239,186,16,116,225,210,69,255,139,231,59,188,59,206,92,242,184,116,242,178,219,229,19,87,184,87,154,175,58,95,109,234,116,234,60,254,147,211,79,199,187,156,187,154,174,185,92,107,185,238,122,189,181,123,102,247,233,27,158,55,206,221,244,189,121,241,22,255,214,213,158,57,61,221,189,243,122,111,247,197,247,245,223,22,221,126,114,39,253,206,203,187,217,119,39,238,173,188,79,188,95,244,64,237,65,217,67,221,135,213,63,91,254,220,216,239,220,127,106,192,119,160,243,209,220,71,247,6,133,131,207,254,145,245,143,15,67,5,143,153,143,203,134,13,134,235,158,56,62,57,57,226,63,114,253,233,252,167,67,207,100,207,38,158,23,254,162,254,203,174,23,22,47,126,248,213,235,215,206,209,152,209,161,151,242,151,147,191,109,124,165,253,234,192,235,25,175,219,198,194,198,30,190,201,120,51,49,94,244,86,251,237,193,119,220,119,29,239,163,223,15,79,228,124,32,127,40,255,104,249,177,245,83,208,167,251,147,25,147,147,255,4,3,152,243,252,99,51,45,219,0,0,0,32,99,72,82,77,0,0,122,37,0,0,128,131,0,0,249,255,0,0,128,233,0,0,117,48,0,0,234,96,0,0,58,152,0,0,23,111,146,95,197,70,0,0,52,62,73,68,65,84,120,218,236,157,119,124,213,213,253,255,159,159,113,239,231,174,236,73,32,9,73,8,1,100,40,97,8,14,10,2,138,10,184,40,67,156,212,129,182,106,113,161,213,138,202,183,86,212,182,214,217,214,170,12,71,197,90,21,23,162,160,20,23,14,134,128,16,118,66,200,222,185,243,51,206,239,143,123,3,151,144,96,20,212,246,215,251,126,60,62,143,220,220,251,249,156,115,62,231,188,223,175,243,94,231,28,73,8,65,140,98,20,163,255,77,146,99,93,16,163,24,253,239,146,122,240,227,170,99,81,158,20,117,197,40,70,223,149,4,96,29,155,162,70,199,122,243,187,1,192,81,105,17,109,151,18,185,164,200,255,82,59,112,136,81,140,162,133,61,250,115,155,240,27,145,191,230,177,5,132,24,29,75,0,144,162,4,94,5,89,5,213,14,118,5,28,42,168,10,200,10,72,49,109,32,70,93,0,2,33,192,50,65,55,33,96,64,200,0,83,7,75,143,0,129,25,1,130,152,195,234,63,0,0,228,240,115,150,13,52,59,36,106,16,116,25,70,163,107,253,250,175,221,107,214,124,237,218,187,183,202,214,212,228,147,13,195,144,98,179,127,140,190,77,11,176,217,84,145,152,232,182,242,242,186,133,78,61,117,144,255,184,227,242,90,21,37,209,7,54,63,52,4,193,8,129,164,71,105,7,49,250,9,0,64,10,207,248,194,6,146,3,82,29,32,226,214,174,253,40,233,229,151,63,72,124,229,149,213,206,178,178,26,53,20,210,229,14,212,254,24,114,199,168,51,158,58,132,63,156,78,205,202,206,78,215,167,79,31,227,155,60,121,84,211,9,39,20,215,131,217,10,141,1,16,193,8,16,152,49,158,58,70,3,112,48,12,184,170,43,179,190,6,241,14,112,198,127,244,209,71,105,247,223,191,48,117,217,178,79,92,145,123,172,40,91,46,70,49,58,26,64,136,76,54,88,211,166,141,241,222,118,219,197,181,3,7,14,173,133,150,22,104,245,131,28,140,50,11,58,161,152,19,240,88,1,64,68,248,133,19,146,92,166,25,74,190,247,222,191,116,255,221,239,22,38,232,186,37,181,161,113,178,71,101,96,174,147,145,189,227,232,157,105,39,53,78,197,97,147,49,5,180,6,77,246,215,27,108,216,235,229,227,109,173,108,41,15,196,122,62,70,93,5,4,213,229,178,155,119,222,121,121,227,220,185,87,150,131,213,0,77,94,144,130,71,54,9,98,0,112,44,0,32,34,252,56,33,205,179,115,231,182,204,153,51,239,236,241,233,167,223,56,1,29,16,133,25,26,23,141,74,229,252,97,137,244,203,118,130,166,28,174,216,73,145,127,44,104,105,212,89,179,173,149,197,255,174,227,197,143,235,137,229,33,197,168,139,64,96,59,253,244,33,222,133,11,239,46,203,200,232,94,13,245,173,64,160,115,16,136,1,192,209,2,128,4,216,64,56,32,61,110,215,174,45,221,78,63,253,250,156,29,59,42,85,192,80,100,184,241,172,12,174,159,144,65,86,174,11,12,1,1,51,236,208,21,18,2,129,16,17,217,151,162,188,128,118,25,28,10,248,45,86,110,104,100,238,115,229,124,190,203,27,27,137,24,117,133,212,226,226,94,161,229,203,255,184,55,37,37,187,10,234,90,65,242,71,64,64,196,0,224,216,2,128,10,150,19,146,60,165,165,187,179,78,57,101,118,110,105,105,141,10,24,121,169,118,254,126,77,79,70,15,79,62,32,248,150,41,176,186,48,155,75,18,200,72,72,54,9,220,10,193,102,131,59,159,219,199,3,203,42,143,29,151,200,96,196,124,197,255,223,130,192,160,65,249,161,15,62,120,98,79,98,98,74,37,52,182,68,124,2,70,12,0,142,29,0,200,32,52,136,243,0,105,167,156,114,89,225,154,53,155,53,192,200,79,215,120,243,246,222,244,233,235,129,70,29,203,20,152,226,80,15,206,183,145,136,220,43,75,32,187,20,208,100,30,90,188,143,155,158,223,247,189,94,162,123,178,141,73,131,19,25,90,224,38,61,65,197,165,41,132,116,139,154,102,131,205,229,126,222,89,223,204,250,189,190,239,221,73,221,18,109,140,58,206,195,200,194,56,50,19,85,60,154,130,37,160,201,111,242,77,185,159,85,155,91,248,104,91,235,183,115,174,34,49,101,88,18,217,105,118,90,3,86,135,224,168,27,130,6,175,193,142,202,32,59,171,131,52,251,204,239,212,214,65,57,78,206,31,158,132,170,72,168,146,196,186,61,62,150,174,109,192,48,143,140,206,249,233,26,231,13,77,34,104,90,152,237,154,38,75,224,11,90,84,52,234,236,172,10,176,187,58,132,110,126,59,218,143,238,23,199,200,34,15,245,94,243,59,199,129,5,144,236,148,217,86,25,228,159,107,27,218,155,138,182,73,147,78,244,190,246,218,147,219,193,87,7,129,86,32,116,168,41,16,3,128,46,161,105,103,142,23,144,29,224,142,159,55,239,254,238,107,214,108,118,2,161,220,84,59,239,221,89,68,94,145,7,81,31,194,52,15,170,249,178,12,178,28,30,230,182,239,59,28,117,1,138,2,178,36,133,211,188,188,38,178,41,184,241,210,28,36,89,226,198,37,101,223,233,5,110,62,59,147,155,39,101,144,150,238,8,215,103,133,77,16,36,113,160,254,249,1,139,23,86,215,242,203,103,203,104,250,14,2,149,236,86,184,225,172,12,46,255,89,42,221,211,53,176,201,17,95,70,196,166,145,194,126,13,130,38,171,54,123,185,243,197,125,124,180,189,115,32,24,215,63,158,231,239,46,130,128,5,186,117,80,105,21,237,122,223,130,64,192,100,91,69,128,127,124,210,192,147,239,86,211,208,197,118,223,124,78,22,23,78,235,6,21,33,72,180,17,172,9,178,230,154,141,148,213,135,58,125,198,174,74,252,227,250,124,134,12,79,130,70,253,80,41,140,250,44,76,65,147,207,100,243,62,63,207,124,88,203,194,15,234,48,58,81,251,100,9,30,184,56,155,226,225,73,80,27,226,123,33,64,188,74,75,85,144,127,111,109,165,170,73,143,254,213,120,253,245,79,221,127,254,243,83,221,175,187,238,154,32,84,26,124,107,84,32,70,157,57,249,58,248,78,216,32,73,91,191,126,77,234,61,247,44,78,140,56,252,88,242,171,124,242,250,198,33,106,195,194,143,0,89,8,212,20,27,114,119,39,100,104,144,161,161,100,57,80,109,18,135,216,4,2,36,75,160,166,105,200,89,225,123,165,12,13,57,67,131,160,128,22,131,57,51,123,48,101,120,82,151,27,255,199,153,217,44,184,46,143,180,116,13,124,70,216,7,225,86,32,217,6,73,246,176,191,193,111,161,104,50,51,127,222,131,65,57,174,46,151,221,43,67,227,221,223,246,225,206,75,115,233,158,229,12,219,20,173,70,88,120,37,1,178,0,93,128,223,4,36,70,143,74,225,141,219,11,201,78,177,119,90,102,143,20,91,196,255,97,134,159,53,44,80,36,112,72,160,73,96,151,194,62,20,211,194,225,80,24,212,39,142,223,205,206,227,173,59,138,200,77,181,119,169,221,186,204,65,127,76,208,194,31,49,137,142,68,113,14,153,94,221,157,16,18,7,219,101,9,176,73,145,43,12,118,18,144,24,175,114,210,144,4,158,250,117,1,175,207,45,36,37,174,227,84,18,187,44,145,152,160,66,200,2,51,250,18,225,203,232,228,115,244,189,33,11,167,75,33,222,33,119,4,15,230,29,119,252,61,185,180,116,67,42,120,28,97,158,141,45,110,59,22,26,128,2,54,13,136,251,237,111,159,77,21,66,72,128,184,117,98,38,39,159,146,130,85,29,196,178,194,179,171,36,129,146,104,231,147,13,77,188,242,113,3,190,128,133,44,65,143,84,59,191,60,59,19,151,83,197,12,152,7,156,128,74,178,157,21,31,215,179,252,203,70,252,33,19,69,146,40,236,238,228,154,211,211,145,117,11,201,148,121,234,154,60,62,219,225,165,180,46,116,196,134,79,27,153,204,13,151,100,131,207,196,108,49,80,226,194,194,245,213,150,102,54,239,243,227,180,43,156,152,239,166,71,142,51,44,116,118,137,4,103,215,166,161,130,116,141,119,127,91,68,94,111,15,212,135,48,67,22,138,83,129,116,59,132,44,2,13,33,116,19,226,226,84,72,182,135,25,184,37,68,98,15,39,5,233,26,101,157,180,93,55,44,48,4,166,9,150,37,80,21,9,35,96,17,66,160,202,18,54,73,66,246,168,225,246,214,5,177,154,117,228,144,197,137,35,146,88,242,203,124,198,220,187,237,91,85,111,203,20,96,128,97,9,84,211,234,146,111,198,18,16,212,195,66,111,152,22,178,44,33,75,132,223,91,137,12,116,156,26,6,212,186,16,162,193,64,210,100,38,140,75,227,31,192,132,5,219,209,141,67,43,209,45,65,141,215,162,32,195,17,22,87,57,74,116,117,129,213,168,99,73,225,103,100,11,228,248,176,41,120,200,125,201,118,154,119,121,105,246,26,29,54,187,165,197,111,187,231,158,69,105,79,61,245,96,61,120,3,32,244,152,22,112,116,0,16,201,239,79,178,111,218,244,73,114,36,201,199,204,75,215,184,227,231,221,193,107,132,25,44,34,71,138,83,193,144,224,250,191,149,242,249,206,67,61,249,83,71,165,208,51,219,133,8,152,72,2,20,183,130,97,10,174,122,116,39,187,235,244,40,187,87,98,214,232,84,92,30,5,171,65,39,62,199,201,61,83,178,184,244,201,61,157,171,172,138,196,156,137,153,97,115,163,89,71,118,40,132,20,137,171,22,148,240,210,234,58,124,17,102,204,240,168,12,44,116,241,155,105,217,140,26,147,250,173,118,112,27,61,247,171,60,242,138,226,176,106,130,152,186,133,45,94,133,56,27,47,189,93,205,35,111,86,178,191,38,136,101,129,219,169,48,246,132,4,46,31,151,198,192,161,137,96,147,176,43,71,214,106,15,116,188,42,33,37,219,185,126,65,9,239,172,111,70,150,36,20,25,146,226,85,174,156,144,193,229,103,102,130,21,66,247,155,216,170,130,156,60,50,153,243,134,37,242,143,79,26,126,16,70,16,109,41,92,2,228,100,59,31,126,218,192,21,79,236,70,150,194,96,144,152,160,114,205,132,12,102,78,200,64,52,234,24,65,11,91,109,136,211,70,167,114,233,167,245,252,109,101,237,33,229,153,2,46,249,227,14,6,188,81,73,200,103,30,224,153,6,175,201,216,126,30,238,186,36,7,17,81,235,229,84,59,79,189,90,201,179,255,174,35,201,163,132,87,144,8,176,59,21,246,236,247,83,213,218,169,249,99,60,247,220,74,207,93,119,109,74,202,206,238,227,133,186,64,199,17,129,24,117,21,0,36,144,109,160,187,22,45,122,63,33,98,145,138,95,158,158,134,39,219,137,168,240,31,202,48,154,76,85,101,128,77,101,254,67,10,25,146,239,34,43,217,14,161,168,129,115,171,108,219,225,101,111,253,33,182,28,167,31,31,143,51,94,133,160,133,41,64,110,53,184,112,108,58,255,247,106,37,219,43,59,78,24,234,153,106,103,104,161,27,154,245,176,67,49,77,99,241,210,114,158,109,199,132,85,173,6,43,214,53,179,98,221,102,198,14,140,103,253,110,255,183,118,200,165,163,82,25,126,82,10,162,77,248,93,10,196,219,184,242,247,37,252,237,221,154,195,238,223,188,207,207,195,203,42,185,107,70,119,126,57,61,187,203,62,6,41,2,181,91,43,130,236,174,141,210,24,170,130,124,182,125,23,166,9,87,92,208,13,246,7,48,13,129,162,194,217,67,147,126,48,0,56,212,197,38,81,221,172,179,189,42,120,240,187,10,248,100,107,43,77,94,131,107,167,247,128,242,0,102,208,66,81,37,166,159,146,114,24,0,0,148,148,7,40,233,32,233,203,219,162,115,215,21,61,195,62,35,1,184,20,86,110,108,226,163,45,205,223,25,183,2,129,160,252,207,127,126,152,112,195,13,125,106,65,242,69,180,0,51,38,218,223,207,7,160,128,106,179,172,122,215,171,175,174,113,1,86,162,83,97,198,169,41,224,51,48,141,67,125,85,216,37,246,84,4,241,135,14,213,186,142,235,225,196,158,100,131,128,21,70,115,0,77,162,100,143,239,48,117,116,72,190,11,201,173,132,109,62,25,172,102,3,53,213,206,204,83,147,59,109,116,106,124,68,29,53,4,146,44,129,12,59,247,29,89,184,223,219,216,76,109,139,113,100,161,148,224,166,137,25,97,48,210,5,178,34,65,166,198,131,127,223,219,161,240,71,211,221,207,151,115,194,244,47,248,114,175,191,235,189,111,9,226,157,29,171,12,143,191,81,137,191,65,71,118,41,8,33,192,132,172,36,219,143,195,21,150,192,174,118,108,46,221,251,143,253,120,43,131,200,46,5,75,8,240,153,20,229,184,72,113,117,125,89,73,138,71,61,116,142,182,4,30,231,247,54,223,205,23,94,88,233,129,38,23,168,106,152,135,99,244,125,0,32,178,196,215,174,174,91,183,195,189,115,231,126,21,96,104,47,55,153,185,46,68,179,113,136,39,87,66,128,34,179,169,252,112,134,63,46,199,5,138,140,161,135,71,89,137,212,82,210,129,144,246,239,238,4,69,194,180,34,14,112,11,240,155,156,61,52,9,165,19,147,221,178,194,97,7,17,89,72,74,171,193,228,239,224,60,236,140,198,14,140,231,184,222,30,240,26,8,4,74,178,157,170,157,62,230,189,188,191,75,207,239,107,53,186,108,102,124,27,85,52,233,120,91,140,131,157,135,64,254,15,96,237,134,22,131,237,21,1,112,42,97,33,54,4,9,110,133,68,247,209,53,78,250,254,235,69,197,230,205,123,212,138,138,42,23,168,109,142,192,216,234,211,239,9,0,42,104,234,71,31,109,114,89,150,144,1,49,122,80,60,168,50,150,33,218,1,128,4,22,124,182,195,219,222,134,96,96,129,59,28,230,138,24,99,146,18,246,198,175,47,245,29,86,121,159,92,23,24,214,193,56,175,4,120,13,6,246,112,146,159,161,117,44,28,13,33,66,193,176,35,74,8,176,26,117,134,15,140,103,201,47,243,232,145,108,255,254,0,208,63,30,226,84,68,200,10,119,140,67,230,245,143,235,241,6,127,124,191,82,207,52,141,164,120,245,96,184,208,38,83,218,96,252,244,12,35,131,213,182,132,63,50,136,65,83,16,252,9,51,175,188,222,128,242,239,127,127,237,10,231,161,199,52,128,163,49,1,100,80,149,189,123,171,218,244,57,209,63,199,25,246,232,136,118,33,61,85,2,191,193,198,157,135,10,117,162,75,161,127,119,71,36,60,118,208,166,12,54,235,124,181,251,208,123,115,211,236,20,118,115,128,191,29,243,232,2,53,78,165,111,118,199,97,187,210,122,157,247,54,52,67,55,13,73,136,112,226,138,215,228,194,211,211,249,247,221,69,220,50,41,147,94,221,180,239,220,25,253,115,93,32,68,56,58,39,75,16,178,120,111,75,203,15,58,0,29,37,4,1,220,54,57,19,197,169,96,249,13,20,85,6,85,226,95,31,215,253,228,12,19,239,82,232,149,106,135,96,196,177,167,201,84,52,232,212,52,255,164,224,36,237,218,85,97,139,36,106,196,54,161,57,10,13,64,2,89,110,110,246,29,248,62,51,193,6,166,133,56,68,71,19,72,46,133,186,58,157,178,234,224,161,51,87,186,70,247,20,91,56,14,77,56,100,142,38,179,191,58,196,142,118,14,161,130,12,7,174,228,131,247,30,116,46,8,176,75,228,166,119,60,155,11,224,183,139,203,48,155,13,212,44,13,201,16,232,186,192,106,53,233,217,195,201,253,87,230,178,230,238,190,60,124,105,54,3,115,156,93,234,8,69,130,172,52,45,28,67,23,97,243,6,191,201,142,125,254,31,166,231,5,16,18,228,167,107,164,197,171,228,103,104,20,117,115,112,193,137,201,188,118,115,47,38,159,146,130,168,11,133,19,173,138,220,172,250,176,142,215,62,107,252,209,24,163,179,69,90,191,60,35,131,248,52,7,150,223,10,107,129,110,133,141,59,90,9,154,63,153,227,93,0,212,215,183,200,225,93,168,98,194,255,93,72,237,200,26,51,205,3,59,249,16,239,80,14,143,172,70,60,183,27,190,110,166,182,245,80,228,31,148,231,2,183,10,13,161,176,250,111,9,112,200,108,174,12,28,86,204,113,57,46,112,72,152,245,135,154,23,109,14,34,151,214,185,99,232,203,221,62,102,220,181,141,23,230,247,69,205,115,65,69,0,67,183,16,94,129,98,147,200,200,212,184,238,130,44,46,29,149,202,159,222,168,226,190,215,42,9,28,65,77,141,115,200,36,184,149,131,25,229,10,88,65,139,134,214,31,102,102,51,77,129,220,108,240,187,233,221,153,59,41,19,85,149,176,41,18,105,9,42,170,71,133,86,3,201,173,160,244,112,178,254,147,6,46,122,104,231,143,23,219,146,36,66,237,226,250,73,110,149,105,35,147,184,253,188,110,224,55,49,77,129,205,173,130,46,120,166,131,8,192,143,77,134,97,198,54,164,61,54,0,0,146,116,80,240,204,142,82,122,101,9,236,50,27,118,120,15,19,234,193,249,110,80,165,176,163,174,237,81,135,204,242,13,77,135,213,83,92,228,6,19,132,213,65,29,146,68,56,7,169,115,122,233,147,122,118,255,98,29,15,254,42,143,83,135,36,161,10,160,50,128,17,176,144,12,129,34,75,196,39,218,248,237,85,61,25,209,207,195,185,11,118,116,106,207,219,149,176,0,30,144,50,25,244,16,24,63,64,64,169,45,99,217,180,4,169,137,54,82,83,237,225,142,110,11,145,120,77,132,83,97,203,94,63,11,158,216,195,210,247,106,240,255,88,51,172,4,52,234,140,40,116,243,244,236,158,56,84,25,89,130,194,76,7,131,139,220,32,8,39,94,169,18,228,59,121,230,233,50,86,108,108,254,201,25,57,74,65,141,229,0,28,5,0,8,16,66,211,108,7,58,177,217,111,134,123,87,136,3,189,172,40,18,152,130,109,101,29,121,245,195,153,95,130,48,151,43,137,54,244,122,157,215,214,212,31,238,44,236,225,12,167,214,210,1,202,8,168,247,125,251,236,251,249,110,31,163,230,108,230,242,177,105,92,60,33,157,81,197,137,168,66,64,117,8,61,104,33,91,2,197,16,140,27,155,206,131,251,130,204,126,102,111,199,51,178,21,9,30,183,53,195,4,155,42,225,176,253,48,19,138,176,64,149,8,107,75,142,176,141,143,46,160,58,128,97,8,84,155,74,69,125,136,197,203,171,127,100,142,150,48,3,38,217,169,118,46,59,51,51,172,253,73,17,112,10,134,29,146,74,90,56,229,251,189,183,170,249,229,227,187,255,35,24,217,233,180,199,118,16,62,74,31,64,164,3,77,35,45,45,241,192,188,183,171,54,24,206,7,143,118,0,106,50,70,147,193,150,118,246,113,130,75,161,87,119,7,232,22,150,136,56,210,186,57,120,236,95,149,148,53,28,154,0,148,157,98,167,40,93,11,59,147,56,180,124,100,9,66,38,219,202,186,190,130,239,233,247,106,248,217,141,155,25,243,203,141,188,249,239,122,200,208,176,37,218,176,76,129,30,178,160,62,196,213,19,51,24,222,203,221,225,243,45,1,51,156,196,211,230,67,182,4,178,38,145,150,120,236,99,239,2,80,84,9,41,197,198,239,158,45,101,252,117,95,51,101,238,55,188,182,170,22,50,52,100,77,198,108,208,25,59,44,137,175,238,63,142,228,56,219,143,202,20,150,21,113,138,36,168,144,168,132,255,38,219,161,155,3,82,237,84,212,133,184,121,254,54,198,221,190,229,64,214,229,79,57,249,3,34,51,51,217,140,232,107,49,16,56,10,13,192,2,221,42,44,236,30,106,155,150,63,43,241,138,25,147,101,36,17,181,225,159,93,166,166,58,200,214,253,135,2,64,110,170,157,148,100,27,132,194,51,175,220,203,205,206,77,205,220,253,226,225,203,124,7,229,185,112,36,170,224,183,14,157,255,35,78,67,95,147,193,182,178,239,190,117,216,170,77,45,172,218,180,149,203,199,165,241,215,95,23,160,198,169,24,94,51,236,104,204,116,114,238,240,164,195,66,151,16,94,179,82,211,16,2,123,92,184,53,150,0,135,66,191,108,39,31,119,97,169,239,119,70,94,37,252,158,111,109,104,58,176,148,248,229,143,235,120,178,49,159,171,126,158,133,85,230,195,106,50,56,254,196,36,30,152,222,157,89,127,221,243,163,121,212,20,167,66,93,163,193,154,175,154,240,56,101,4,208,220,106,82,83,167,179,106,91,43,111,175,109,160,57,240,31,149,108,39,250,244,201,9,134,183,21,143,109,31,254,125,1,32,162,1,4,141,147,78,58,206,167,57,236,86,48,16,146,86,111,104,18,248,77,100,151,130,233,143,100,246,41,18,245,141,58,53,205,135,50,65,32,100,225,138,183,65,154,134,98,8,118,109,111,229,140,185,91,104,236,32,61,118,112,158,43,156,76,210,98,180,115,0,10,72,180,241,254,186,70,106,90,190,191,3,238,233,21,53,116,139,83,153,127,109,30,170,207,10,47,142,145,4,185,169,157,135,7,119,148,249,57,77,9,231,228,155,86,216,212,57,99,96,60,79,189,87,243,195,244,190,41,72,109,183,154,110,246,163,187,24,223,63,142,188,158,46,140,234,32,114,163,206,229,103,166,243,248,138,106,190,220,237,251,193,25,66,18,2,57,217,198,234,181,13,156,247,192,142,255,6,30,150,50,51,147,205,225,195,251,120,35,234,100,12,0,142,194,4,48,33,164,231,229,229,120,135,13,45,10,1,124,93,230,103,253,150,86,164,84,251,193,126,149,192,212,15,239,227,146,202,32,127,94,186,159,141,59,189,60,251,252,62,78,251,213,70,118,84,5,59,172,184,111,55,39,40,225,77,67,163,229,95,182,73,224,80,120,109,77,253,81,143,226,43,95,52,64,171,137,164,30,212,22,229,35,152,244,171,183,182,130,110,34,171,82,216,249,233,53,57,125,88,34,121,105,246,31,109,64,4,112,255,43,21,224,81,144,37,176,90,12,72,180,113,229,184,180,31,113,62,253,175,146,31,121,196,136,126,193,184,184,84,31,24,177,115,3,142,2,0,104,243,1,64,162,119,234,212,209,173,128,108,10,120,108,89,5,168,50,138,77,62,224,220,75,140,83,113,217,15,15,211,93,255,212,94,134,76,249,156,203,254,180,147,61,145,133,63,113,78,249,144,117,227,178,4,253,122,58,15,248,10,162,107,151,211,52,170,182,123,121,177,157,211,48,154,122,165,107,156,144,253,237,241,253,62,221,92,225,220,16,17,49,237,101,168,104,214,59,189,255,159,159,214,83,85,26,128,120,21,201,2,211,107,224,73,178,243,151,171,122,30,204,200,237,76,149,82,36,174,28,155,70,78,234,209,131,197,63,86,215,81,179,55,128,156,108,199,180,4,52,232,92,56,42,133,140,120,245,71,67,33,249,191,39,152,38,205,156,121,90,11,120,252,97,222,141,1,192,209,0,128,8,175,166,50,252,83,166,252,172,209,227,113,154,128,252,204,170,90,182,173,111,66,74,215,194,186,177,207,162,123,119,7,199,247,236,88,8,163,69,172,91,130,141,187,206,207,66,141,226,168,220,84,59,249,89,142,136,198,118,112,210,81,100,192,163,112,255,210,125,120,67,157,143,227,181,19,210,249,236,161,254,220,58,177,27,217,157,8,92,178,71,101,238,228,76,64,96,26,34,156,185,168,91,44,95,223,212,105,185,65,93,240,200,27,85,144,170,161,72,34,236,12,171,215,25,55,34,153,151,231,20,208,175,199,225,239,235,180,203,156,210,55,142,101,55,247,226,47,119,246,102,104,190,235,168,7,165,49,96,242,202,234,90,72,180,33,203,18,150,207,196,157,225,228,226,159,165,198,56,246,80,82,122,244,72,11,157,126,250,73,141,16,8,68,88,47,166,254,31,157,19,16,3,154,66,233,233,69,13,55,220,112,94,203,252,249,207,37,153,2,235,170,39,118,243,193,19,131,176,37,216,177,154,117,148,52,141,187,127,222,131,51,239,43,233,116,147,138,130,12,141,119,239,237,203,186,111,90,14,217,210,41,55,77,195,157,108,135,198,208,129,248,173,108,10,164,94,110,62,249,176,158,63,46,171,58,98,163,83,19,237,216,122,56,249,253,172,108,174,57,61,141,55,215,53,177,169,204,79,117,147,142,4,20,100,58,152,113,82,50,3,138,60,88,141,122,120,195,142,2,15,31,125,88,203,219,95,53,29,177,236,5,255,218,207,207,199,164,49,112,72,2,214,182,86,12,64,109,53,56,103,84,42,163,251,197,179,124,67,51,219,202,253,232,150,32,217,173,50,180,151,155,147,138,60,97,127,134,34,227,114,29,155,84,244,167,223,175,225,138,137,25,40,46,5,221,103,34,235,22,87,143,77,227,145,183,171,9,232,177,73,142,200,226,181,91,110,249,121,179,219,221,189,9,170,66,196,182,5,59,106,0,136,128,128,165,67,171,239,215,191,158,86,253,236,179,203,221,251,246,213,170,31,110,110,49,239,255,203,94,110,253,117,1,242,78,19,81,31,100,236,240,36,94,158,83,192,125,175,86,176,179,42,72,147,207,194,105,151,232,145,108,103,82,113,2,87,143,77,35,167,127,28,59,246,250,24,156,231,34,164,11,28,118,153,95,157,145,14,122,120,201,173,136,8,191,146,237,36,80,175,115,217,159,118,126,107,163,13,137,112,220,220,107,146,211,221,193,236,28,23,4,44,244,200,254,3,54,151,26,94,90,220,98,32,11,1,5,110,244,102,131,171,31,251,246,152,181,110,193,140,223,151,240,254,67,199,145,209,219,13,187,124,24,33,11,217,16,36,196,219,248,249,216,212,48,139,89,132,237,10,33,194,107,25,204,112,198,99,93,163,254,237,70,126,244,213,9,173,221,225,229,243,175,91,24,62,52,17,169,69,71,180,232,228,23,122,152,52,56,129,151,62,107,248,214,242,69,23,234,56,226,115,63,134,179,35,234,250,30,85,202,253,251,231,5,174,186,234,188,106,104,244,129,8,129,20,19,254,99,3,0,82,8,188,254,228,228,188,186,167,158,186,197,115,198,25,183,100,1,210,220,231,202,68,106,178,141,89,151,230,32,237,246,66,179,206,164,147,83,56,243,248,4,182,237,15,80,215,106,224,113,200,20,100,58,72,72,182,131,37,16,123,124,140,31,152,192,232,190,30,130,58,56,53,9,197,46,35,26,245,112,110,145,41,80,114,156,4,124,22,227,111,220,196,182,138,111,15,253,253,245,237,106,38,255,44,133,164,60,87,88,248,124,38,168,96,83,149,131,220,165,72,200,89,26,184,20,190,222,210,202,165,243,182,178,169,139,97,197,205,101,126,134,93,189,145,167,110,41,100,220,200,164,112,39,181,68,246,28,12,88,225,132,168,182,157,80,29,74,56,70,174,72,188,250,242,126,254,189,165,243,144,97,188,75,129,116,13,197,111,134,1,44,93,35,206,222,185,115,225,209,119,170,25,62,33,29,53,24,222,74,140,116,59,115,167,102,241,234,231,13,116,102,33,37,39,170,144,106,199,214,98,64,178,141,100,77,14,103,56,30,137,9,100,200,72,179,65,146,13,155,37,32,85,35,61,241,135,203,61,112,107,50,164,219,145,34,251,74,146,174,145,244,221,52,39,73,146,224,233,167,231,86,217,237,105,245,80,27,0,41,102,255,127,31,27,106,222,188,121,145,143,123,58,248,57,36,245,234,213,223,244,122,107,92,31,127,188,197,5,136,215,215,54,144,97,151,24,122,106,42,88,22,162,73,71,177,43,164,167,107,228,118,119,208,45,205,142,67,149,33,104,98,234,17,59,26,129,106,83,176,59,228,240,114,82,93,132,247,196,147,37,228,124,55,77,77,6,231,223,178,133,85,91,187,182,242,110,95,93,136,151,87,214,162,132,4,118,155,68,122,188,13,41,65,13,103,213,185,21,176,203,24,134,197,87,219,125,60,245,74,5,151,221,183,157,210,6,253,59,117,76,147,223,100,241,123,53,148,236,246,145,36,75,56,92,10,113,73,54,136,179,135,235,112,42,128,96,111,181,206,103,95,52,113,203,95,246,48,239,133,114,66,71,72,217,77,114,170,156,60,40,30,155,37,208,45,216,91,17,228,233,101,149,236,235,164,109,101,85,65,78,237,229,38,41,197,78,208,103,18,50,4,21,181,33,94,90,85,71,160,147,122,114,51,28,12,236,229,70,14,152,248,129,79,55,181,178,248,221,106,124,186,56,130,35,72,98,120,191,56,82,82,236,152,1,139,134,160,224,95,171,106,121,255,7,74,241,117,170,50,99,6,38,160,41,18,186,105,81,81,175,179,228,141,74,182,85,4,187,170,250,43,11,22,92,81,63,101,202,148,125,80,223,2,34,192,97,7,134,230,197,164,187,43,157,121,132,131,65,148,240,217,0,14,23,168,169,179,102,221,213,243,233,167,223,73,32,178,231,218,149,99,211,120,240,186,124,226,82,237,80,27,194,106,14,111,197,38,34,219,125,139,14,70,45,156,105,32,144,109,50,114,154,29,92,10,31,124,82,207,21,11,118,116,26,46,236,10,13,205,119,209,51,77,195,25,153,77,125,65,139,221,213,65,190,220,115,236,226,230,221,18,84,250,103,59,73,246,216,80,21,208,77,65,109,179,193,186,221,62,26,252,93,79,138,73,212,100,186,69,118,14,46,173,14,226,237,66,38,93,159,76,237,128,163,180,172,62,116,68,97,6,232,30,175,146,16,167,98,232,130,146,234,174,247,107,97,154,29,213,38,211,226,53,217,215,164,255,160,140,231,148,37,122,102,104,72,18,84,214,133,168,239,218,158,11,18,160,222,114,203,180,250,251,239,191,117,47,180,214,65,200,27,214,88,219,207,254,177,115,1,142,22,0,164,131,32,16,239,134,80,234,101,151,221,211,243,217,103,151,123,218,208,182,111,55,7,191,153,153,205,212,49,169,168,9,106,88,77,110,54,14,108,98,113,200,209,128,178,20,206,121,79,178,129,166,80,82,210,202,147,175,86,242,240,191,246,199,244,182,24,117,201,230,7,228,27,111,156,210,248,224,131,55,149,130,168,7,111,107,228,144,208,14,146,127,98,0,112,180,0,16,13,2,14,112,187,192,74,126,224,129,103,187,223,121,231,51,201,193,160,78,91,199,15,205,115,113,214,169,41,156,55,44,137,1,89,14,112,41,97,195,242,192,33,161,225,133,36,129,38,131,55,183,182,176,252,163,122,150,124,88,139,95,143,69,108,98,212,165,89,95,142,143,119,137,7,31,156,93,119,197,21,211,202,193,104,0,159,47,50,243,119,162,170,196,0,224,88,0,192,1,228,61,104,14,56,226,222,127,255,131,204,121,243,158,73,93,179,102,147,131,3,25,132,224,86,37,122,164,107,244,202,118,146,159,174,145,236,86,8,153,130,170,38,157,173,251,2,148,85,4,14,91,20,20,163,24,29,73,240,1,233,244,211,135,248,239,186,235,210,154,17,35,70,86,129,183,5,66,109,194,111,210,105,0,33,6,0,199,10,0,162,53,1,91,248,208,16,143,59,24,172,73,90,188,248,221,212,197,139,87,196,173,94,189,209,17,185,231,187,6,159,98,20,163,246,124,214,118,89,227,198,13,9,94,114,201,233,205,23,94,120,90,53,36,52,65,171,15,140,0,72,93,216,250,59,6,0,199,18,0,218,72,33,28,58,180,131,205,1,14,103,115,115,85,252,170,85,95,37,172,92,185,222,243,241,199,155,181,210,210,106,181,185,217,43,5,2,161,216,206,44,49,234,170,208,227,112,216,173,132,4,143,149,159,159,105,156,124,242,128,224,207,126,118,124,235,168,81,131,154,220,238,180,102,8,248,65,15,16,62,0,212,232,218,36,19,3,128,31,2,0,162,180,1,212,240,33,34,118,59,40,26,4,157,45,45,45,218,222,189,149,206,138,138,58,123,93,93,139,234,245,250,37,33,132,36,73,49,44,136,209,225,100,89,2,69,145,132,199,227,178,146,147,227,204,172,172,212,80,110,110,134,223,237,78,8,128,234,7,51,4,161,96,56,49,141,182,56,127,23,181,203,24,0,252,80,0,16,173,170,69,206,183,145,213,200,10,119,53,252,89,85,194,89,50,255,45,123,180,73,237,44,152,255,212,246,181,209,79,209,206,232,62,162,93,123,172,46,180,187,179,54,11,17,206,224,179,172,200,169,164,6,8,51,44,244,194,140,18,124,190,219,75,199,0,160,43,244,125,151,151,69,70,211,178,192,102,66,130,14,122,228,40,89,25,14,56,14,145,195,103,105,55,254,7,190,122,219,137,149,73,132,87,56,25,132,143,193,21,50,180,165,218,198,1,90,52,135,75,208,36,133,29,207,63,230,65,180,241,145,163,115,219,206,61,87,101,104,58,74,97,78,36,178,103,179,232,248,6,51,50,110,2,240,0,246,200,209,193,106,228,221,131,109,171,56,68,184,207,228,182,190,2,218,50,46,101,113,208,84,183,115,144,23,14,235,187,200,204,46,34,123,82,180,253,141,249,147,254,83,1,32,226,131,201,4,12,241,197,23,159,136,167,159,126,155,139,46,26,107,115,58,157,109,59,107,26,146,36,25,46,151,38,21,22,14,143,0,67,244,88,86,71,254,166,119,32,152,229,64,66,68,0,1,130,145,251,45,32,57,234,123,29,216,15,56,128,140,14,218,88,11,248,34,101,198,69,158,109,35,31,16,98,235,214,173,226,205,55,223,211,150,44,121,91,190,225,134,233,198,248,241,163,3,221,186,165,75,96,225,245,214,176,99,71,185,16,66,216,1,36,73,210,7,13,26,20,85,183,136,212,107,111,87,103,107,84,155,162,103,202,150,40,96,137,38,111,164,63,227,219,125,239,7,236,172,93,187,82,158,61,251,65,247,206,157,123,213,33,67,6,232,15,61,244,203,214,65,131,206,136,252,30,93,70,109,164,190,244,72,253,209,242,85,201,65,167,121,50,219,182,173,183,2,129,144,34,132,56,140,7,36,73,50,146,146,226,204,156,156,97,50,216,48,140,221,98,245,234,213,234,61,247,60,109,27,53,234,4,235,248,227,123,91,183,223,254,132,187,180,180,82,158,56,113,84,104,201,146,59,189,129,128,46,118,238,220,39,0,250,244,201,195,178,44,233,182,219,158,116,46,92,248,154,83,150,101,235,143,127,188,209,127,198,25,99,3,233,233,133,114,120,60,219,198,117,191,8,3,76,218,17,102,120,29,168,106,167,77,196,232,71,54,1,204,8,227,58,34,90,89,28,159,124,242,17,139,22,189,202,147,79,190,174,68,166,82,91,212,40,25,64,64,150,165,214,121,243,46,181,36,73,33,218,113,123,211,77,83,49,12,139,63,253,105,233,33,181,200,178,204,237,183,95,203,154,53,255,230,131,15,214,3,208,179,103,38,51,103,206,0,236,124,252,241,114,86,174,92,7,64,183,110,41,204,154,245,11,116,189,148,251,239,127,225,176,22,95,125,245,36,82,83,251,0,50,187,118,125,206,243,207,191,127,224,183,81,163,134,96,24,65,198,140,153,227,84,20,45,189,168,168,143,173,164,100,91,48,53,213,93,241,213,87,75,140,110,221,50,25,60,248,231,172,91,183,61,62,74,98,253,247,222,123,89,253,29,119,252,134,240,12,108,99,225,194,231,40,43,171,62,80,238,236,217,147,73,73,25,0,148,242,187,223,45,193,178,14,170,199,163,71,159,16,238,233,85,235,14,105,231,136,17,199,17,31,239,98,249,242,207,15,249,126,240,224,34,178,178,50,56,233,164,171,227,50,50,122,246,24,55,110,92,226,178,101,175,215,53,54,86,149,221,126,251,197,254,232,40,216,136,17,199,113,218,105,19,1,147,151,94,122,145,146,146,178,3,229,56,28,118,110,186,233,162,3,160,250,218,107,139,57,247,220,223,218,132,16,201,28,126,54,4,128,153,148,228,169,159,51,231,34,29,28,44,95,254,158,188,102,205,215,25,189,122,245,117,53,53,53,25,53,53,251,131,67,135,158,148,114,194,9,39,196,255,253,239,127,175,28,49,162,87,121,109,109,99,104,235,214,50,7,160,157,120,98,63,191,174,27,161,47,191,44,201,186,252,242,171,123,212,213,213,153,175,189,182,116,95,118,118,122,245,149,87,78,19,109,64,88,80,144,197,244,233,87,210,216,184,129,71,31,253,87,167,156,151,158,158,196,149,87,94,24,1,178,200,1,86,223,10,2,199,199,164,187,75,138,176,16,145,107,101,39,215,10,132,88,135,16,165,248,124,239,176,121,243,171,220,121,231,69,20,23,15,194,102,59,192,59,142,228,228,228,94,107,215,174,29,87,93,93,125,78,93,93,221,57,239,191,255,254,232,137,19,39,245,5,82,59,242,3,244,234,149,69,126,126,183,14,219,84,92,220,23,165,221,14,28,197,197,253,41,46,30,132,170,42,237,190,31,72,97,97,143,14,203,233,209,35,141,226,226,129,20,23,15,34,37,229,208,217,85,81,36,236,118,21,32,233,255,254,239,119,195,44,75,76,62,251,236,137,125,1,87,183,110,137,244,235,215,29,64,137,139,139,235,254,209,71,31,141,126,249,229,151,199,0,221,1,245,193,7,103,115,205,53,231,80,92,124,220,97,117,102,103,167,83,92,60,152,126,253,114,15,87,183,84,229,176,246,183,145,166,117,188,248,198,237,214,0,226,159,120,226,137,147,132,16,151,223,118,219,109,131,35,58,121,7,253,54,136,226,226,1,29,150,51,112,96,62,203,150,221,207,138,21,143,28,176,43,46,186,232,226,65,107,215,126,62,161,186,186,250,220,134,134,198,115,26,26,26,207,109,104,104,156,124,193,5,83,6,0,209,187,167,58,139,138,250,20,133,66,161,115,22,45,90,52,4,72,93,189,122,245,41,66,136,203,78,59,109,108,223,136,61,145,54,120,112,113,209,69,23,93,116,60,144,2,72,133,133,133,57,66,136,159,11,33,38,39,39,39,119,239,72,227,44,46,30,66,78,78,70,71,54,74,187,251,250,80,92,220,155,185,115,103,176,121,243,171,108,222,252,244,17,175,131,124,29,187,142,116,69,253,243,101,39,215,14,86,175,254,19,11,22,220,202,176,97,125,59,195,17,247,121,231,157,55,64,8,49,243,205,55,223,28,247,175,127,253,235,84,33,196,84,195,48,38,247,233,211,39,63,194,76,90,100,10,74,140,252,181,71,52,134,164,40,125,63,49,114,57,0,103,212,255,158,40,230,113,70,238,79,138,124,223,118,32,164,59,162,67,183,47,231,0,72,69,126,79,138,42,83,1,18,87,172,88,49,78,8,49,109,196,136,17,5,81,134,44,128,189,87,175,94,121,66,136,243,215,173,91,55,54,194,216,114,59,19,202,19,85,95,92,84,59,109,237,126,75,136,124,103,111,247,206,73,145,118,181,181,223,211,174,253,54,32,53,55,55,183,231,175,126,245,171,1,185,185,185,185,81,237,247,68,245,169,39,74,120,60,81,117,182,245,85,251,157,83,18,23,46,92,120,170,16,98,198,187,239,190,59,122,201,146,37,167,46,89,178,100,244,146,37,75,78,29,50,100,72,47,192,21,53,102,9,215,95,127,125,127,33,196,37,87,92,113,197,32,32,185,176,176,48,247,218,107,175,29,144,154,154,154,3,164,93,112,193,5,189,133,16,83,110,191,253,246,193,81,109,74,63,255,252,243,251,76,154,52,169,159,44,203,73,145,182,185,34,191,37,69,222,185,205,169,224,137,244,71,92,84,255,104,71,63,177,197,174,35,93,234,65,53,244,162,78,186,210,197,103,159,125,241,109,219,196,217,167,76,153,226,6,140,11,47,188,112,91,99,99,99,237,139,47,190,56,96,234,212,169,69,25,25,25,206,173,91,183,218,251,246,237,155,121,221,117,215,165,23,20,20,216,86,173,90,229,189,255,254,251,43,44,203,10,92,122,233,165,217,39,157,116,146,86,91,91,43,250,247,239,239,122,252,241,199,107,222,126,251,237,218,137,19,39,38,95,126,249,229,105,62,159,79,60,243,204,51,141,239,189,247,94,53,96,20,21,21,37,93,119,221,117,233,133,133,133,246,151,95,126,185,241,175,127,253,107,53,96,78,154,52,41,165,160,160,192,166,235,186,58,105,210,36,207,23,95,124,225,157,63,127,126,141,207,231,171,5,212,188,188,188,212,57,115,230,164,247,236,217,211,86,87,87,103,44,93,186,180,249,205,55,223,172,200,204,204,212,78,61,245,84,199,230,205,155,155,63,255,252,243,86,14,77,48,81,210,211,211,93,128,109,245,234,213,141,17,99,212,138,2,148,196,241,227,199,167,92,113,197,21,201,78,167,83,252,227,31,255,104,90,188,120,113,101,196,56,143,155,62,125,122,218,212,169,83,19,116,93,183,190,254,250,107,255,227,143,63,94,85,91,91,107,206,157,59,55,163,71,143,30,90,75,75,11,199,29,119,156,246,240,195,15,87,53,55,55,75,195,135,15,119,238,217,179,199,184,242,202,43,147,74,75,75,67,11,22,44,168,42,45,45,245,79,159,62,61,101,244,232,209,113,223,124,243,141,183,178,178,210,200,206,206,78,154,57,115,102,252,190,125,251,196,132,9,19,226,253,126,191,241,232,163,143,214,173,91,183,174,22,144,79,62,249,228,212,217,179,103,167,5,2,1,115,239,222,189,65,187,221,174,220,117,215,93,229,166,105,86,70,218,47,59,157,78,109,204,152,49,241,21,21,21,141,227,199,143,255,44,202,83,215,6,112,238,241,227,199,167,204,154,53,43,213,231,243,233,133,133,133,118,203,178,154,255,249,207,127,54,142,30,61,58,245,226,139,47,78,254,250,235,175,91,106,107,107,141,254,253,251,199,61,244,208,67,57,128,122,198,25,103,36,199,197,197,25,11,22,44,104,190,253,246,219,83,237,118,187,88,190,124,185,215,178,44,19,72,44,46,46,78,189,230,154,107,210,178,178,178,212,23,94,120,161,97,209,162,69,213,0,211,167,79,79,77,77,77,149,53,77,211,198,143,31,239,90,189,122,117,203,239,127,255,251,90,195,48,170,57,232,52,136,209,15,101,2,28,5,201,64,234,7,31,124,48,70,8,49,49,62,62,62,11,240,188,240,194,11,35,133,16,51,251,247,239,95,112,246,217,103,23,10,33,206,111,109,109,61,123,207,158,61,167,9,33,166,62,250,232,163,195,128,228,85,171,86,141,22,66,92,34,132,152,36,132,152,116,254,249,231,31,119,214,89,103,21,9,33,206,43,47,47,31,47,132,152,92,82,82,50,14,72,63,227,140,51,138,44,203,154,44,132,152,216,218,218,122,134,16,98,234,93,119,221,85,172,40,74,230,174,93,187,78,19,66,76,111,109,109,61,35,16,8,76,16,66,76,127,226,137,39,134,0,105,197,197,197,5,77,77,77,147,132,16,147,235,235,235,199,9,33,102,188,241,198,27,163,128,196,33,67,134,228,11,33,206,123,238,185,231,78,137,204,60,209,234,103,252,188,121,243,138,133,16,51,38,79,158,28,173,22,171,64,183,199,30,123,108,184,16,98,74,69,69,197,248,250,250,250,51,132,16,83,102,204,152,209,15,72,89,182,108,217,201,66,136,41,53,53,53,227,132,16,147,133,16,83,250,245,235,87,0,116,171,171,171,59,67,8,49,83,215,245,179,44,203,58,107,208,160,65,121,243,231,207,63,81,8,113,97,32,16,152,208,216,216,120,186,16,98,218,59,239,188,51,10,72,95,176,96,193,64,33,196,180,166,166,166,137,178,44,103,60,254,248,227,67,132,16,211,132,16,103,71,202,159,182,103,207,158,113,154,166,101,158,118,218,105,69,66,136,243,163,250,104,198,134,13,27,198,216,237,246,104,21,220,86,84,84,148,43,132,152,184,127,255,254,201,119,221,117,215,144,123,238,185,231,164,233,211,167,247,143,120,227,146,230,206,157,123,188,16,98,170,16,98,82,164,142,41,62,159,111,66,74,74,74,214,205,55,223,60,80,8,113,113,83,83,211,25,64,218,136,17,35,10,133,16,23,8,33,206,109,110,110,62,115,241,226,197,35,220,110,119,183,146,146,146,177,66,136,11,159,124,242,201,98,32,249,146,75,46,233,39,132,56,215,48,140,179,3,129,192,153,66,136,169,179,102,205,26,168,105,90,86,219,120,54,54,54,158,110,24,198,89,66,136,105,119,223,125,119,113,68,91,136,105,0,63,208,117,44,98,89,138,36,73,246,140,140,12,13,80,31,123,236,177,30,203,151,47,31,58,109,218,180,188,213,171,87,151,9,33,244,101,203,150,13,216,187,119,175,239,196,19,79,252,242,23,191,248,197,78,64,58,225,132,19,92,73,73,73,246,227,143,63,222,25,8,4,154,71,142,28,185,33,39,39,103,237,138,21,43,26,230,207,159,223,13,112,222,122,235,173,187,115,114,114,62,27,59,118,236,214,194,194,66,237,173,183,222,234,179,127,255,126,163,119,239,222,235,114,115,115,191,42,41,41,105,186,233,166,155,210,251,244,233,163,2,114,121,121,121,203,113,199,29,183,177,168,168,104,19,16,234,219,183,175,51,37,37,69,126,255,253,247,139,36,73,146,242,243,243,63,61,231,156,115,118,2,193,237,219,183,123,1,145,147,147,227,2,156,187,118,237,242,114,48,203,172,77,149,182,157,120,226,137,78,32,176,118,237,90,31,7,23,158,56,103,205,154,149,122,205,53,215,20,172,90,181,170,226,164,147,78,250,234,161,135,30,218,7,184,138,138,138,236,151,94,122,105,198,217,103,159,157,115,247,221,119,239,204,207,207,95,183,97,195,134,134,150,150,150,224,150,45,91,252,78,167,83,77,76,76,116,111,223,190,189,186,119,239,222,235,179,179,179,215,111,216,176,161,181,119,239,222,154,16,66,159,48,97,194,182,194,194,194,245,129,64,160,185,168,168,40,1,16,143,61,246,88,61,208,188,117,235,86,191,101,89,166,203,229,146,0,107,234,212,169,59,243,243,243,191,248,248,227,143,107,114,115,115,93,253,251,247,183,255,225,15,127,200,174,172,172,12,229,230,230,126,217,167,79,159,205,128,185,113,227,70,127,40,20,242,19,117,242,97,92,92,156,6,168,233,233,233,234,188,121,243,114,239,188,243,206,220,129,3,7,186,0,107,252,248,241,169,247,221,119,95,225,170,85,171,106,243,242,242,62,31,49,98,196,102,203,178,140,242,242,114,179,177,177,209,124,251,237,183,27,0,239,91,111,189,21,4,172,205,155,55,183,6,2,129,224,158,61,123,252,133,133,133,95,92,116,209,69,59,188,94,111,104,225,194,133,181,128,120,227,141,55,90,242,242,242,92,207,62,251,108,191,245,235,215,123,123,246,236,249,101,78,78,206,186,234,234,106,223,77,55,221,148,222,187,119,111,89,81,20,121,203,150,45,205,253,250,245,91,55,116,232,208,111,0,115,248,240,225,78,98,199,125,255,160,116,76,0,96,216,176,97,206,188,188,60,155,105,154,204,156,57,51,109,252,248,241,241,75,150,44,217,123,193,5,23,108,159,52,105,82,34,160,37,39,39,75,47,190,248,98,159,183,222,122,235,132,186,186,58,239,236,217,179,247,102,100,100,104,137,137,137,206,215,94,123,173,230,147,79,62,105,40,43,43,171,110,110,110,110,186,229,150,91,42,130,193,160,119,241,226,197,3,175,191,254,250,30,165,165,165,129,179,206,58,43,89,146,36,199,157,119,222,185,123,251,246,237,205,117,117,117,122,93,93,157,225,116,58,165,212,212,84,173,103,207,158,238,181,107,215,214,236,221,187,215,111,183,219,109,128,186,124,249,242,230,97,195,134,37,36,36,36,196,61,244,208,67,123,118,239,222,221,226,241,120,156,128,90,90,90,234,7,212,243,207,63,223,3,24,175,190,250,170,55,74,64,218,250,198,150,147,147,227,54,77,51,160,235,7,82,81,1,180,105,211,166,37,3,244,238,221,219,185,124,249,242,227,231,207,159,223,123,195,134,13,251,22,45,90,84,127,199,29,119,116,47,47,47,111,156,55,111,94,105,75,75,139,220,163,71,15,87,85,85,85,43,96,76,159,62,221,45,203,178,253,15,127,248,67,237,238,221,187,27,202,203,203,171,186,117,235,102,159,50,101,74,252,87,95,125,213,180,106,213,170,58,192,102,183,219,149,242,242,114,47,96,88,150,101,3,92,187,119,239,110,6,68,159,62,125,18,129,214,151,95,126,185,177,165,165,69,201,200,200,208,42,42,42,2,77,77,77,214,192,129,3,61,251,246,237,107,46,45,45,109,30,56,112,160,27,176,109,217,178,197,224,208,85,115,74,97,97,161,11,112,220,120,227,141,91,37,73,250,72,146,164,213,183,221,118,91,25,96,77,158,60,57,13,144,231,207,159,191,107,207,158,61,205,78,167,211,38,203,178,178,108,217,178,86,211,52,253,249,249,225,157,79,183,111,223,222,2,132,6,14,28,232,208,52,205,182,114,229,74,95,85,85,149,31,168,1,196,200,145,35,227,128,224,27,111,188,209,242,139,95,252,34,3,80,110,189,245,214,221,251,246,237,107,173,174,174,214,189,94,175,174,105,154,72,75,75,115,56,28,14,231,234,213,171,171,246,239,223,31,116,185,92,54,64,253,226,139,47,252,116,186,218,47,70,63,113,30,192,65,65,233,215,175,159,67,211,52,237,225,135,31,222,243,232,163,143,238,179,44,75,221,181,107,87,11,192,160,65,131,92,128,185,112,225,194,234,186,186,58,253,235,175,191,174,222,181,107,87,235,198,141,27,155,198,142,29,155,5,216,34,194,216,182,211,158,109,197,138,21,141,241,241,241,31,253,225,15,127,200,191,241,198,27,251,213,214,214,234,145,182,154,91,183,110,245,1,250,128,1,3,18,70,140,24,145,188,116,233,210,253,77,77,77,150,36,73,206,117,235,214,5,1,101,198,140,25,110,64,94,186,116,105,203,128,1,3,226,0,229,253,247,223,111,2,236,183,220,114,75,50,96,189,240,194,11,173,128,173,184,184,216,29,12,6,125,91,182,108,105,207,108,74,114,114,178,150,159,159,239,94,185,114,101,77,109,109,109,75,180,247,189,71,143,30,154,97,24,222,37,75,150,212,52,55,55,139,205,155,55,239,91,187,118,109,83,99,99,163,90,80,80,224,89,185,114,101,53,16,28,52,104,80,74,74,74,74,194,135,31,126,184,23,48,250,247,239,239,6,204,93,187,118,5,34,128,99,166,167,167,219,1,101,255,254,253,62,64,164,167,167,219,101,89,118,150,149,149,85,1,242,41,167,156,226,4,236,203,151,47,247,2,114,239,222,189,221,59,118,236,240,90,150,101,246,238,221,219,93,80,80,224,92,180,104,81,205,142,29,59,188,143,60,242,72,249,140,25,51,178,94,127,253,245,193,195,135,15,79,88,189,122,117,197,95,255,250,215,202,40,240,2,176,159,115,206,57,78,192,120,248,225,135,235,35,62,11,91,155,255,35,46,46,206,1,88,223,124,243,77,0,96,210,164,73,73,128,90,85,85,229,5,172,236,236,108,23,160,84,87,87,251,0,169,160,160,192,35,73,146,250,233,167,159,182,29,19,236,118,56,28,182,193,131,7,187,106,107,107,91,1,35,43,43,203,9,232,37,37,37,62,192,24,53,106,84,90,94,94,94,210,3,15,60,176,195,178,44,9,208,214,175,95,31,4,212,233,211,167,187,1,241,250,235,175,251,98,0,240,95,160,1,228,229,229,37,0,234,71,31,125,212,178,99,199,142,198,93,187,118,237,39,156,242,101,68,6,81,42,40,40,112,110,219,182,205,59,124,248,112,123,223,190,125,29,128,50,122,244,104,55,160,126,242,201,39,109,3,237,56,245,212,83,187,125,248,225,135,125,39,77,154,148,102,133,131,232,122,93,93,157,185,115,231,78,47,160,222,114,203,45,185,87,93,117,85,238,219,111,191,61,16,48,127,251,219,223,150,78,158,60,57,30,144,87,172,88,225,3,140,33,67,134,36,0,70,121,121,121,48,16,8,152,128,124,245,213,87,103,222,124,243,205,121,163,70,141,234,14,88,149,149,149,22,32,247,234,213,203,237,247,251,117,211,52,219,31,67,164,158,121,230,153,46,77,211,236,138,162,56,110,184,225,134,188,57,115,230,244,159,51,103,78,255,162,162,34,247,243,207,63,95,171,170,170,211,110,183,171,229,229,229,129,49,99,198,184,85,85,181,69,226,254,122,113,113,113,210,213,87,95,157,243,194,11,47,20,2,174,96,48,104,1,102,126,126,126,60,32,26,26,26,252,17,129,179,39,37,37,185,0,215,206,157,59,91,1,101,228,200,145,110,64,91,182,108,89,43,32,157,123,238,185,30,128,215,94,123,205,55,96,192,0,103,82,82,146,246,238,187,239,250,128,192,176,97,195,92,128,90,94,94,238,3,140,91,111,189,181,84,150,101,99,226,196,137,189,227,227,227,67,215,95,127,253,142,186,186,186,104,65,146,37,73,114,20,23,23,123,0,230,206,157,219,99,206,156,57,5,115,230,204,201,187,246,218,107,115,1,173,164,164,164,9,176,221,123,239,189,61,103,207,158,157,63,127,254,252,60,192,44,41,41,241,3,246,179,207,62,59,14,144,63,248,224,3,63,96,75,78,78,118,0,142,115,206,57,39,241,178,203,46,235,217,150,19,146,153,153,25,183,127,255,254,0,192,142,29,59,90,1,237,142,59,238,232,121,245,213,87,247,124,235,173,183,6,120,189,94,255,35,143,60,82,62,117,234,212,4,64,172,88,177,194,31,14,249,21,199,3,161,138,138,10,63,223,186,234,47,70,63,181,6,224,232,221,187,183,189,178,178,210,187,113,227,198,182,173,153,218,6,45,248,252,243,207,215,20,20,20,168,191,249,205,111,122,76,152,48,33,195,235,245,250,199,141,27,183,13,208,78,62,249,100,71,121,121,121,227,123,239,189,23,140,60,163,230,230,230,42,3,7,14,116,47,93,186,180,159,174,235,193,7,30,120,96,251,223,254,246,183,90,135,195,33,45,90,180,104,207,204,153,51,187,157,115,206,57,169,37,37,37,173,35,71,142,220,184,117,235,86,255,160,65,131,114,42,43,43,235,171,170,170,66,128,170,105,154,163,178,178,178,89,81,20,105,245,234,213,141,111,188,241,198,158,169,83,167,118,159,56,113,98,224,189,247,222,171,40,44,44,116,245,237,219,215,254,205,55,223,248,151,45,91,86,127,252,241,199,199,15,27,54,44,126,205,154,53,141,81,102,128,45,45,45,205,89,89,89,233,27,57,114,100,220,152,49,99,218,28,132,230,254,253,251,91,238,189,247,222,253,133,133,133,218,117,215,93,151,173,40,138,178,110,221,186,230,235,175,191,190,2,208,47,188,240,194,221,143,62,250,104,222,19,79,60,209,231,171,175,190,170,223,184,113,99,153,223,239,87,28,14,135,51,43,43,203,86,82,82,210,242,205,55,223,180,237,100,163,13,26,52,200,89,89,89,25,92,186,116,105,43,160,141,25,51,198,93,89,89,217,252,246,219,111,251,0,201,110,183,59,42,43,43,235,234,235,235,245,83,78,57,37,161,178,178,210,255,213,87,95,181,0,138,199,227,113,86,86,86,6,35,255,75,126,191,63,244,242,203,47,87,159,121,230,153,150,199,227,113,190,242,202,43,189,79,59,237,180,109,187,119,239,110,137,104,1,54,155,205,230,104,106,106,146,42,43,43,141,251,238,187,47,183,45,187,166,174,174,174,254,233,167,159,174,251,243,159,255,92,49,120,240,96,231,172,89,179,178,102,204,152,225,175,174,174,214,27,26,26,124,239,188,243,142,207,110,183,187,243,243,243,109,95,126,249,101,195,166,77,155,130,128,181,124,249,242,218,77,155,54,85,142,27,55,174,123,113,113,113,235,51,207,60,211,216,183,111,95,173,186,186,90,44,89,178,164,37,226,199,168,57,225,132,19,220,179,102,205,202,152,53,107,86,230,23,95,124,209,60,115,230,204,157,101,101,101,70,191,126,253,60,165,165,165,117,13,13,13,6,160,170,170,234,216,182,109,91,83,67,67,67,168,157,89,22,163,31,42,19,240,40,86,236,37,198,199,199,39,7,131,65,130,193,160,55,98,255,89,237,226,239,113,154,166,185,100,89,182,133,66,33,221,52,205,102,0,151,203,149,96,24,134,20,10,133,124,132,115,125,101,32,89,85,85,77,85,85,13,48,2,129,128,15,104,142,48,105,66,164,28,217,239,247,251,35,223,203,14,135,35,69,8,65,48,24,108,1,132,195,225,72,16,66,8,93,215,155,45,203,10,1,30,135,195,225,52,194,20,116,56,28,110,73,146,252,126,191,223,7,184,93,46,151,75,81,148,64,75,75,75,117,148,170,236,178,219,237,169,146,36,169,237,28,131,66,215,117,191,101,89,94,192,233,112,56,60,128,20,8,4,66,145,246,248,128,120,77,211,220,178,44,219,252,126,191,79,146,36,197,110,183,203,186,174,7,61,30,143,219,235,245,98,154,102,19,80,7,184,226,226,226,210,67,161,144,18,12,6,125,64,208,233,116,198,89,150,37,71,222,71,119,56,28,201,66,8,43,24,12,250,108,54,155,93,150,101,45,24,12,250,129,128,205,102,139,147,101,89,9,6,131,129,19,78,56,193,85,88,88,104,127,233,165,151,170,0,182,108,217,50,172,111,223,190,137,195,135,15,95,187,118,237,218,125,145,119,83,36,73,74,215,52,205,41,14,13,255,72,134,97,152,66,136,70,203,178,130,64,82,228,30,83,8,33,44,203,82,77,211,108,145,101,89,56,28,142,184,96,48,40,76,211,108,137,104,122,30,89,150,227,109,54,155,38,132,48,66,161,80,171,203,229,82,77,211,116,7,131,65,35,138,39,146,52,77,115,202,178,44,69,250,190,25,176,59,157,206,68,195,48,132,174,235,45,145,241,140,55,12,195,50,12,163,145,131,11,51,190,115,20,32,70,63,78,24,176,45,126,172,29,193,164,144,162,238,177,117,225,57,53,234,94,169,157,201,162,69,174,104,237,197,214,46,105,68,107,247,191,18,85,158,210,238,121,245,8,109,111,187,215,30,85,166,22,213,166,206,218,67,84,210,143,18,249,171,70,158,107,95,70,219,189,142,118,73,68,209,247,216,162,18,121,148,118,237,61,144,92,244,167,63,253,105,168,16,98,202,166,77,155,198,111,222,188,121,188,16,226,188,69,139,22,141,116,56,28,153,237,188,233,114,187,247,209,162,222,51,250,221,219,146,181,108,237,234,180,71,46,169,131,177,140,110,167,163,93,153,114,212,125,74,7,125,69,84,31,217,143,5,95,199,174,35,95,199,66,3,136,209,127,6,57,61,30,79,198,37,151,92,146,120,222,121,231,37,89,150,37,150,44,89,82,183,112,225,194,122,160,205,209,247,63,53,177,197,232,199,49,1,98,244,159,67,182,118,218,136,65,56,139,238,127,206,147,30,3,128,239,8,0,49,138,81,140,254,247,72,142,117,65,140,98,20,3,128,24,197,40,70,49,0,136,81,140,98,244,191,68,255,111,0,8,69,111,92,255,73,60,99,0,0,0,0,73,69,78,68,174,66,96,130\";" );
               #endif
            
               AddCSharpLine( "#pragma warning disable 414" );
               AddCSharpLine( logicClassName + " uScript; ");
               AddCSharpLine( "#pragma warning restore 414" );
            
               AddCSharpLine( "" );

               AddCSharpLine( "void Awake( )" );
               AddCSharpLine( "{" );
               ++m_TabStack;

                  #if FREE_PLE_BUILD
                     // Initialize the Watermark variable
                     AddCSharpLine( "WatermarkTexture = new Texture2D(256, 64, TextureFormat.RGBA32, false);" );

                     // Create the texture byte array from the string
                     AddCSharpLine( "string[] byteStrings = TexBytes.Split(',');" );
                     AddCSharpLine( "byte[] byteOut = new byte[byteStrings.Length];" );
                     AddCSharpLine( "for (int i = 0; i < byteStrings.Length; i++)" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;   
                        AddCSharpLine( "byteOut[i] = System.Convert.ToByte(byteStrings[i]);" );
                    --m_TabStack;
                     AddCSharpLine( "}" );

                     // Assign the watermark to the watermark texture variable
                     AddCSharpLine( "WatermarkTexture.LoadImage(byteOut);" );
                  #endif

                  AddCSharpLine( "useGUILayout = " + (NeedsGuiLayout( ) ? "true;" : "false;") );

                  AddCSharpLine( "uScript = ScriptableObject.CreateInstance(typeof(" + logicClassName + ")) as " + logicClassName + ";" );
                  AddCSharpLine( "uScript.SetParent( this.gameObject );" );

               --m_TabStack;
               AddCSharpLine( "}" );
            
               {
                  AddCSharpLine( "void Start( )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
               
                     AddCSharpLine( "uScript.Start( );" );
               
                  --m_TabStack;
                  AddCSharpLine( "}" );
               }

               //always do update because the unity hooks
               //and drivens are valdiated there
               {
                  AddCSharpLine( "void Update( )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
               
                     AddCSharpLine( "uScript.Update( );" );
               
                  --m_TabStack;
                  AddCSharpLine( "}" );
               }

               if ( true == NeedsMethod("LateUpdate") )
               {
                  AddCSharpLine( "void LateUpdate( )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
               
                     AddCSharpLine( "uScript.LateUpdate( );" );
               
                  --m_TabStack;
                  AddCSharpLine( "}" );
               }

               if ( true == NeedsMethod("FixedUpdate") )
               {
                  AddCSharpLine( "void FixedUpdate( )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
               
                     AddCSharpLine( "uScript.FixedUpdate( );" );
               
                  --m_TabStack;
                  AddCSharpLine( "}" );
               }


            #if FREE_PLE_BUILD
               AddCSharpLine( "void OnGUI( )" );
               AddCSharpLine( "{" );
               ++m_TabStack;
         
                  AddCSharpLine( "GUI.depth = 0;" );
                  AddCSharpLine( "GUI.DrawTexture(new Rect(16, 16, 256, 64), WatermarkTexture, ScaleMode.ScaleToFit, true);" );

                  if ( true == NeedsMethod("OnGUI") )
                  {
                     AddCSharpLine( "uScript.OnGUI( );" );
                  }
            
               --m_TabStack;
               AddCSharpLine( "}" );
            #else
               if ( true == NeedsMethod("OnGUI") )
               {
                  AddCSharpLine( "void OnGUI( )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
               
                     AddCSharpLine( "uScript.OnGUI( );" );
               
                  --m_TabStack;
                  AddCSharpLine( "}" );
               }
            #endif

               AddCSharpLine( "#if UNITY_EDITOR" );
               ++m_TabStack;

                  AddCSharpLine( "void OnDrawGizmos( )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
               
                     DefineDrawGizmos( );
               
                  --m_TabStack;
                  AddCSharpLine( "}" );

               --m_TabStack;
               AddCSharpLine( "#endif" );

            --m_TabStack;
            AddCSharpLine( "}" );
         }

         return m_CSharpString;
      }

      private bool NeedsMethod(EntityNode node, string methodName)
      {
         string s = ScriptEditor.FindNodeType(node);         
         if ( "" == s ) return false;

         Type t = uScript.MasterComponent.GetType(s);

         //nested script which isn't reflected yet 
         //(maybe the code hasn't been generated)
         if ( null == t && node is LogicNode )
         {
            LogicNode logic = (LogicNode) node;

            foreach ( string m in logic.RequiredMethods )
            {
               if ( m == methodName ) return true;
            }
         }
         else
         {
            if ( null != t.GetMethod(methodName) ) 
            {
               return true;
            }
         }

         return false;
      }

      private bool NeedsMethod(string methodName)
      {
         foreach ( EntityNode node in m_Script.EntityNodes )
         {
            if ( true == NeedsMethod(node, methodName) ) return true;
         }

         return false;
      }

      private bool NeedsGuiLayout( )
      {
         foreach ( EntityNode node in m_Script.EntityNodes )
         {
            if ( true == uScript.NodeNeedsGuiLayout(ScriptEditor.FindNodeType(node)) ) return true;
         }

         return false;
      }

      public string GenerateLogicScript(string logicClassName, ScriptEditor script, bool generateDebugInfo)
      {
         m_CSharpString = "";
         m_TabStack = 0;

         m_Script = null;
         m_GenerateDebugInfo = generateDebugInfo;

         m_ExternalParameters = new List<Parameter>( );
         m_ExternalInputs     = new List<Plug>( );
         m_ExternalOutputs    = new List<Plug>( );
         m_ExternalEvents     = new List<Plug>( );
         m_Drivens            = new List<string>( );
         m_RequiredMethods    = new List<string>( );

         if ( null != script )
         {
            m_Script = script.Copy( );

            Preprocess( );

            DeclareNamespaces( );
            AddCSharpLine( "" );

            AddCSharpLine( "[NodePath(\"Graphs\")]" );
            BeginLogicClass( logicClassName );
            AddCSharpLine( "" );

            ++m_TabStack;
               DeclareMemberVariables( );
               AddCSharpLine( "" );

               SetupProperties( );
               AddCSharpLine( "" );
               DefineSyncUnityHooks( );
               AddCSharpLine( "" );
               DefineSyncEventListeners( );
               AddCSharpLine( "" );
               
               AddCSharpLine( "public override void SetParent(GameObject g)" );
               AddCSharpLine( "{" );
               ++m_TabStack;
                  DefineSetParent( );
               --m_TabStack;
               AddCSharpLine( "}" );

               AddCSharpLine( "public void Awake()" );
               AddCSharpLine( "{" );

               ++m_TabStack;
                  DefineAwakeInitialization( );
               --m_TabStack;

               AddCSharpLine( "}" );
               AddCSharpLine( "" );
               
               {
                  if ( false == m_RequiredMethods.Contains("Start") ) m_RequiredMethods.Add("Start");

                  AddCSharpLine( "public void Start()" );
                  AddCSharpLine( "{" );

                  ++m_TabStack;
                     DefineStartInitialization( );
                  --m_TabStack;

                  AddCSharpLine( "}" );
                  AddCSharpLine( "" );
               }

               //always do fixed update because this is where we sync our unity hooks
               {
                  if ( false == m_RequiredMethods.Contains("Update") ) m_RequiredMethods.Add("Update");

                  AddCSharpLine( "public void Update()" );
                  AddCSharpLine( "{" );

                  ++m_TabStack;
                     DefineUpdate( );
                  --m_TabStack;

                  AddCSharpLine( "}" );
                  AddCSharpLine( "" );
               }

               if ( true == NeedsMethod("LateUpdate") )
               {
                  if ( false == m_RequiredMethods.Contains("LateUpdate") ) m_RequiredMethods.Add("LateUpdate");

                  AddCSharpLine( "public void LateUpdate()" );
                  AddCSharpLine( "{" );

                  ++m_TabStack;
                     DefineLateUpdate( );
                  --m_TabStack;

                  AddCSharpLine( "}" );
                  AddCSharpLine( "" );
               }

               if ( true == NeedsMethod("FixedUpdate") )
               {
                  if ( false == m_RequiredMethods.Contains("FixedUpdate") ) m_RequiredMethods.Add("FixedUpdate");

                  AddCSharpLine( "public void FixedUpdate()" );
                  AddCSharpLine( "{" );

                  ++m_TabStack;
                     DefineFixedUpdate( );
                  --m_TabStack;

                  AddCSharpLine( "}" );
                  AddCSharpLine( "" );
               }

               if ( true == NeedsMethod("OnGUI") )
               {
                  if ( false == m_RequiredMethods.Contains("OnGUI") ) m_RequiredMethods.Add("OnGUI");

                  AddCSharpLine( "public void OnGUI()" );
                  AddCSharpLine( "{" );

                  ++m_TabStack;
                     DefineOnGUI( );
                  --m_TabStack;

                  AddCSharpLine( "}" );
                  AddCSharpLine( "" );
               }

               DefineEvents( );
            --m_TabStack;
            
            EndClass( );
         }

         return m_CSharpString;
      }  
 
      private void DeclareNamespaces( )
      {
         AddCSharpLine( "//uScript Generated Code - Build " + uScript.Instance.BuildNumber );
         if ( true == m_GenerateDebugInfo )
         {
            AddCSharpLine( "//Generated with Debug Info" );
         }

         AddCSharpLine( "using UnityEngine;" );
         AddCSharpLine( "using System.Collections;" );
      }

      private void BeginLogicClass(string logicClassName)
      {
         AddCSharpLine( "public class " + logicClassName + " : uScriptLogic" );
         AddCSharpLine( "{" );
      }

      private void EndClass( )
      {
         AddCSharpLine( "}" );
      }

      //these are property get and set functions for the entity
      //
      //Set:
      //as per the 'how it works' comment, our input node variable will be set
      //and then a PropertySet function is called which sends that variable
      //to the entity's properties
      //
      //Get:
      //a PropertyGet function is called to refresh a CSharp variable with
      //the latest entity property value
      private void SetupProperties( )
      {
         AddCSharpLine( "//functions to refresh properties from entities" );

         foreach ( EntityProperty entityProperty in m_Script.Properties )
         {
            if ( false == entityProperty.IsStatic )
            {
               if ( entityProperty.Instance.Default != "" )
               {
                  if ( true == entityProperty.Parameter.Output )
                  {
                     //as stated above, cretae a function which 
                     //gets the property from the entity and sets the corresponding CSharp variable
                     AddCSharpLine( FormatType(entityProperty.Parameter.Type) + " " + CSharpRefreshGetPropertyDeclaration(entityProperty) + "( )");
                     AddCSharpLine( "{" );
                     ++m_TabStack;
                        AddCSharpLine( entityProperty.ComponentType + " component = " + CSharpName(entityProperty, entityProperty.Instance.Name) + ".GetComponent<" + entityProperty.ComponentType + ">();" );
                        AddCSharpLine( "if ( null != component )" );
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                              AddCSharpLine( "return component." + entityProperty.Parameter.Name + ";" );
                        --m_TabStack;
                        AddCSharpLine( "}" );
                        AddCSharpLine( "else" );
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                              AddCSharpLine( "return " + FormatValue(entityProperty.Parameter.Default, entityProperty.Parameter.Type) + ";" );
                        --m_TabStack;
                        AddCSharpLine( "}" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                     AddCSharpLine( "" );
                  }

                  if ( true == entityProperty.Parameter.Input )
                  {
                     //as stated above, create a function which sets the entity's property to the
                     //corresponding CSharp variable's value
                     AddCSharpLine( "void " + CSharpRefreshSetPropertyDeclaration( entityProperty ) + "( )" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;
                        AddCSharpLine( entityProperty.ComponentType + " component = " + CSharpName(entityProperty, entityProperty.Instance.Name) + ".GetComponent<" + entityProperty.ComponentType + ">();" );
                        AddCSharpLine( "if ( null != component )" );
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                           AddCSharpLine( "component." + entityProperty.Parameter.Name + " = " + CSharpName(entityProperty, entityProperty.Parameter.Name) + ";" );               
                        --m_TabStack;
                        AddCSharpLine( "}" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                     AddCSharpLine( "" );
                  }
               }
               else
               {
                  //only one instance allowed because we have no way to return multiple values (if > 1 instances were hooked up, who's would we return on get?)
                  LinkNode []instanceLinks = FindLinksByDestination( entityProperty.Guid, entityProperty.Instance.Name );

                  foreach ( LinkNode instanceLink in instanceLinks )
                  {
                     EntityNode entityNode = m_Script.GetNode( instanceLink.Source.Guid );

                     if ( true == entityProperty.Parameter.Output )
                     {
                        //as stated above, cretae a function which 
                        //gets the property from the entity and sets the corresponding CSharp variable
                        AddCSharpLine( FormatType(entityProperty.Parameter.Type) + " " + CSharpRefreshGetPropertyDeclaration(entityProperty) + "( )");
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                           AddCSharpLine( entityProperty.ComponentType + " component = " + CSharpName(entityNode) + ".GetComponent<" + entityProperty.ComponentType + ">();" );
                           AddCSharpLine( "if ( null != component )" );
                           AddCSharpLine( "{" );
                           ++m_TabStack;
                                 AddCSharpLine( "return component." + entityProperty.Parameter.Name + ";" );
                           --m_TabStack;
                           AddCSharpLine( "}" );
                           AddCSharpLine( "else" );
                           AddCSharpLine( "{" );
                           ++m_TabStack;
                                 AddCSharpLine( "return " + FormatValue(entityProperty.Parameter.Default, entityProperty.Parameter.Type) + ";" );
                           --m_TabStack;
                           AddCSharpLine( "}" );
                        AddCSharpLine( "}" );
                        AddCSharpLine( "" );
                     }

                     if ( true == entityProperty.Parameter.Input )
                     {
                        //as stated above, create a function which sets the entity's property to the
                        //corresponding CSharp variable's value
                        AddCSharpLine( "void " + CSharpRefreshSetPropertyDeclaration(entityProperty) + "( )" );
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                           AddCSharpLine( entityProperty.ComponentType + " component = " + CSharpName(entityNode) + ".GetComponent<" + entityProperty.ComponentType + ">();" );
                           AddCSharpLine( "if ( null != component )" );
                           AddCSharpLine( "{" );
                           ++m_TabStack;
                              AddCSharpLine( "component." + entityProperty.Parameter.Name + " = " + CSharpName(entityProperty, entityProperty.Parameter.Name) + ";" );               
                           --m_TabStack;
                           AddCSharpLine( "}" );
                        --m_TabStack;
                        AddCSharpLine( "}" );               
                        AddCSharpLine( "" );
                     }

                     break;
                  }
               }
            }
            else //it is static
            {
               if ( true == entityProperty.Parameter.Output )
               {
                  //as stated above, cretae a function which 
                  //gets the property from the entity and sets the corresponding CSharp variable
                  AddCSharpLine( FormatType(entityProperty.Parameter.Type) + " " + CSharpRefreshGetPropertyDeclaration(entityProperty) + "( )");
                  AddCSharpLine( "{" );
                  ++m_TabStack;
                     AddCSharpLine( "return " + entityProperty.ComponentType + "." + entityProperty.Parameter.Name + ";" );               
                  --m_TabStack;

                  AddCSharpLine( "}" );
                  AddCSharpLine( "" );
               }

               if ( true == entityProperty.Parameter.Input )
               {
                  //as stated above, create a function which sets the entity's property to the
                  //corresponding CSharp variable's value
                  AddCSharpLine( "void " + CSharpRefreshSetPropertyDeclaration(entityProperty) + "( )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
                     AddCSharpLine( entityProperty.ComponentType + "." + entityProperty.Parameter.Name + " = " + CSharpName(entityProperty, entityProperty.Parameter.Name) + ";" );               
                  --m_TabStack;
                  AddCSharpLine( "}" );               
                  AddCSharpLine( "" );
               }
            }
         }
      }

      private string FormatValue(string stringValue, string type)
      {
         if ( "System.Object" == type )
         {
            return "\"" + stringValue.Replace( "\"", "\\\"") + "\"";
         }
         else if ( "System.Boolean" == type )
         {
            if ( "" == stringValue )
            {
               return "(bool) false";
            }

            return "(bool) " + stringValue;
         }
         else if ( "System.String" == type )
         {
            return "\"" + EscapeString(stringValue) + "\"";
         }
         else if ( "UnityEngine.Quaternion" == type )
         {
            try
            {
               string [] subString = stringValue.Split( ',' );
               return "new Quaternion( (float)" + subString[0] + ", (float)" + subString[1] + ", (float)" + subString[2] + ", (float)" + subString[3] + " )";
            }
            catch ( Exception ) { return "new Quaternion( )"; }
         }
         else if ( "UnityEngine.Vector2" == type )
         {
            try
            {
               string [] subString = stringValue.Split( ',' );
               return "new Vector2( (float)" + subString[0] + ", (float)" + subString[1] + " )";
            }
            catch ( Exception ) { return "new Vector2( )"; }
         }
         else if ( "UnityEngine.Vector3" == type )
         {
            try
            {
               string [] subString = stringValue.Split( ',' );
               return "new Vector3( (float)" + subString[0] + ", (float)" + subString[1] + ", (float)" + subString[2] + " )";
            }
            catch ( Exception ) { return "new Vector3( )"; }
         }
         else if ( "UnityEngine.Vector4" == type )
         {
            try
            {
               string [] subString = stringValue.Split( ',' );
               return "new Vector4( (float)" + subString[0] + ", (float)" + subString[1] + ", (float)" + subString[2] + ", (float)" + subString[3] + " )";
            }
            catch ( Exception ) { return "new Vector4( )"; }
         }
         else if ( "UnityEngine.Rect" == type )
         {
            try
            {
               string [] subString = stringValue.Split( ',' );
               return "new Rect( (float)" + subString[0] + ", (float)" + subString[1] + ", (float)" + subString[2] + ", (float)" + subString[3] + " )";
            }
            catch ( Exception ) { return "new Rect( )"; }
         }
         else if ( "System.Single" == type )
         {
            if ( "" == stringValue )
            {
               return "(float) 0";
            }

            return "(float) " + stringValue;
         }
         else if ( "System.Double" == type )
         {
            if ( "" == stringValue )
            {
               return "(double) 0";
            }

            return "(double) " + stringValue;
         }
         else if ( "System.Int32" == type )
         {
            if ( "" == stringValue )
            {
               return "(int) 0";
            }

            return "(int) " + stringValue;
         }
         else if ( "UnityEngine.Color" == type )
         {
            try
            {
               string [] subString = stringValue.Split( ',' );
               return "new UnityEngine.Color( (float)" + subString[0] + ", (float)" + subString[1] + ", (float)" + subString[2] + ", (float)" + subString[3] + " )";
            }
            catch ( Exception ) { return "UnityEngine.Color.black"; }
         }
         else if ( "UnityEngine.Ray" == type )
         {
            return "new UnityEngine.Ray( )";
         }
         else if ( "UnityEngine.JointDrive" == type )
         {
            return "new UnityEngine.JointDrive( )";
         }
         else if ( "UnityEngine.RaycastHit" == type )
         {
            return "new UnityEngine.RaycastHit( )";
         }
         else if ( "UnityEngine.NetworkPlayer" == type )
         {
            return "new UnityEngine.NetworkPlayer( )";
         }
         else if ( "UnityEngine.LayerMask" == type )
         {
            if ( "" == stringValue )
            {
               return "0";
            }

            return stringValue;
         }
         else if ( "UnityEngine.NetworkMessageInfo" == type )
         {
            return "new UnityEngine.NetworkMessageInfo( )";
         }
         else if ( type.Contains("[]") )
         {
            return FormatArrayValue( stringValue, type );
         }
         else if ( null != uScript.MasterComponent.GetAssemblyQualifiedType(type) )
         {
            System.Type netType = uScript.MasterComponent.GetAssemblyQualifiedType(type);

            if ( typeof(System.Enum).IsAssignableFrom(netType) )
            {
               System.Enum newEnum;

               //try and turn the text field value back into an enum, if it doesn't work
               //then revert back to the original value
               try { newEnum = (System.Enum) System.Enum.Parse(netType, stringValue); }
               catch { newEnum = (System.Enum) System.Enum.Parse(netType, System.Enum.GetNames(netType)[0]); }


               return FormatType(netType + "." + newEnum.ToString( ));
            }
         }

         return "null";
      }
      
      private string FormatArrayValue(string stringValue, string type)
      {
         string declaration = "";

         string []elements = Parameter.StringToArray( stringValue );

         if ( "UnityEngine.Quaternion[]" == type )
         {
            try
            {
               elements = Parameter.FlattenStringArrays( elements, ',' );

               declaration = "new Quaternion[] {";

               for ( int i = 0; i < elements.Length; i += 4 )
               {
                  declaration += "new Quaternion((float)" + elements[i] + ",(float)" + elements[i+1] + ",(float)" + elements[i+2] + ",(float)" + elements[i+3] + "),";
               }

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new Quaternion[0]"; }
         }
         else if ( "UnityEngine.Vector2[]" == type )
         {
            try
            {
               elements = Parameter.FlattenStringArrays( elements, ',' );

               declaration = "new Vector2[] {";

               for ( int i = 0; i < elements.Length; i += 2 )
               {
                  declaration += "new Vector2((float)" + elements[i] + ",(float)" + elements[i+1] + "),";
               }

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new Vector2[0]"; }
         }
         else if ( "UnityEngine.Vector3[]" == type )
         {
            try
            {
               elements = Parameter.FlattenStringArrays( elements, ',' );

               declaration = "new Vector3[] {";

               for ( int i = 0; i < elements.Length; i += 3 )
               {
                  declaration += "new Vector3((float)" + elements[i] + ",(float)" + elements[i+1] + ",(float)" + elements[i+2] + "),";
               }

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new Vector3[0]"; }
         }
         else if ( "UnityEngine.Vector4[]" == type )
         {
            try
            {
               elements = Parameter.FlattenStringArrays( elements, ',' );

               declaration = "new Vector4[] {";

               for ( int i = 0; i < elements.Length; i += 4 )
               {
                  declaration += "new Vector4((float)" + elements[i] + ",(float)" + elements[i+1] + ",(float)" + elements[i+2] + ",(float)" + elements[i+3] + "),";
               }

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new Vector4[0]"; }
         }
         else if ( "UnityEngine.Rect[]" == type )
         {
            try
            {
               elements = Parameter.FlattenStringArrays( elements, ',' );

               declaration = "new Rect[] {";

               for ( int i = 0; i < elements.Length; i += 4 )
               {
                  declaration += "new Rect((float)" + elements[i] + ",(float)" + elements[i+1] + ",(float)" + elements[i+2] + ",(float)" + elements[i+3] + "),";
               }

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new Rect[0]"; }
         }
         else if ( "UnityEngine.Color[]" == type )
         {
            try
            {
               elements = Parameter.FlattenStringArrays( elements, ',' );

               declaration = "new UnityEngine.Color[] {";

               for ( int i = 0; i < elements.Length; i += 3 )
               {
                  declaration += "new UnityEngine.Color((float)" + elements[i] + ", (float)" + elements[i+1] + ", (float)" + elements[i+2] + ", (float)" + elements[i+3] + "),";
               }

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new UnityEngine.Color[0]"; }
         }
         else if ( "UnityEngine.GameObject[]" == type )
         {
            try
            {
               declaration = "new UnityEngine.GameObject[] {";

               string arguments = "";

               for ( int i = 0; i < elements.Length; i++ )
               {
                  if ( "" == elements[i] ) continue;

                  arguments += "null,";
               };

               if ( arguments.Length > 0 ) arguments = arguments.Substring( 0, arguments.Length - 1 );

               declaration += arguments;
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new UnityEngine.GameObject[0]"; }
         }
         else if ( "UnityEngine.Component[]" == type )
         {
            try
            {
               declaration = "new UnityEngine.Component[] {";

               for ( int i = 0; i < elements.Length; i++ )
               {
                  declaration += "null,";
               };

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new UnityEngine.Component[0]"; }
         }
         else if ( "UnityEngine.NetworkPlayer[]" == type )
         {
            try
            {
               declaration = "new UnityEngine.NetworkPlayer[] {";

               for ( int i = 0; i < elements.Length; i++ )
               {
                  declaration += "new UnityEngine.NetworkPlayer(),";
               };

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new UnityEngine.NetworkPlayer[0]"; }
         }
         else if ( "UnityEngine.Camera[]" == type )
         {
            try
            {
               declaration = "new UnityEngine.Camera[] {";

               for ( int i = 0; i < elements.Length; i++ )
               {
                  declaration += "null,";
               };

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new UnityEngine.Camera[0]"; }
         }
         else if ( "System.Boolean[]" == type )
         {
            try
            {
               declaration = "new System.Boolean[] {";

               for ( int i = 0; i < elements.Length; i++ )
               {
                  string value = elements[i].Trim();
                  if ( "" == value ) value = "false";

                  declaration += value + ",";
               };

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new UnityEngine.Boolean[0]"; }
         }
         else if ( "UnityEngine.ContactPoint[]" == type )
         {
            declaration = "new UnityEngine.ContactPoint[ " + elements.Length + " ]";;
         }
         else
         {
            try
            {
               string cast = "";

               if ( "System.Single[]" == type ) 
               {
                  cast = "(float)";
               }
               else if ( "System.Double[]" == type ) 
               {
                  cast = "(double)";
               }
               else
               {
                  if ( null != uScript.MasterComponent.GetAssemblyQualifiedType(type.Replace("[]", "")) )
                  {
                     System.Type netType = uScript.MasterComponent.GetAssemblyQualifiedType(type.Replace("[]", ""));

                     if ( typeof(System.Enum).IsAssignableFrom(netType) )
                     {
                        cast = netType.ToString() + ".";
                     }
                  }
               }

               bool formatString = ( type == "System.String[]" || type == "System.Object[]" );

               declaration = "new " + type + " {";

               foreach ( string element in elements )
               {
                  if ( true == formatString )
                  {
                     declaration += "\"" + EscapeString(element) + "\"" + ",";
                  }
                  else
                  {
                     string value = element.Trim();
                     if ( "" == value ) value = "0";

                     declaration += cast + value + ",";
                  }
               }

               if ( elements.Length > 0 ) declaration = declaration.Substring( 0, declaration.Length - 1 );
               declaration += "}";
            }
            catch ( Exception ) { declaration = "new " + type.Replace("[]", "") + "[0]";  }
         }

         return declaration;
      }

      private void DefineDrawGizmos( )
      {
         Hashtable uniqueObjects = new Hashtable( );

         foreach ( EntityNode node in m_Script.EntityNodes )
         {
            if ( node is LocalNode )
            {
               LocalNode localNode = (LocalNode) node;
               
               if ( "UnityEngine.GameObject" == localNode.Value.Type && "" != localNode.Value.Default )
               {
                  uniqueObjects[ localNode.Value.Default ] = "uscript_gizmo_variables.png";
               }
            }
            else
            {
               if ( null == node.Instance.Default || "" == node.Instance.Default ) continue;

               if ( node is EntityEvent )
               {
                  uniqueObjects[ node.Instance.Default ] = "uscript_gizmo_events.png";
               }
               else if ( node is EntityMethod )
               {
                  uniqueObjects[ node.Instance.Default ] = "uscript_gizmo.png";
               }
            }
         }

         if ( uniqueObjects.Keys.Count > 0 )
         {
            foreach ( string key in uniqueObjects.Keys )
            {
               //ignore master game object - this will render its own master gizmo
               if ( key == uScriptRuntimeConfig.MasterObjectName ) continue;

               AddCSharpLine( "{" );
               ++m_TabStack;
               AddCSharpLine( "GameObject gameObject;" );
               AddCSharpLine( "gameObject = GameObject.Find( \"" + EscapeString(key) + "\" ); " );
               AddCSharpLine( "if ( null != gameObject ) Gizmos.DrawIcon(gameObject.transform.position, \"" + uniqueObjects[key] + "\");" );
               --m_TabStack;
               AddCSharpLine( "}" );
            }
         }
      }
      
      //declare all the members this file will use throughout the CSharp functions
      //all node inputs are represented by global variables
      private void DeclareMemberVariables( )
      {
         AddCSharpLine( "#pragma warning disable 414" );

         AddCSharpLine( "GameObject parentGameObject = null;" );
         AddCSharpLine( "uScript_GUI " + OnGuiListenerName( ) + " = null; " );

         if ( true == m_GenerateDebugInfo )
         {
            AddCSharpLine( "const int MaxRelayCallCount = " + uScript.Preferences.MaximumNodeRecursionCount + ";" );
            AddCSharpLine( "int relayCallCount = 0;" );
         }

         AddCSharpLine( "//external output properties" );
         Plug []properties = FindExternalOutputProperties( );
         string []outputs  = FindExternalOutputs( );

         for ( int i = 0; i < properties.Length; i++ )
         {
            AddCSharpLine( "bool " + outputs[i] + " = false;" );

            AddCSharpLine( "[FriendlyName(\"" + properties[i].FriendlyName + "\")]" );
            AddCSharpLine( "public bool " + properties[i].Name + " { get { return " + outputs[i] + ";} }" );

            m_ExternalOutputs.Add( properties[i] );
         }
         

         AddCSharpLine( "" );
         AddCSharpLine( "//externally exposed events" );
         Plug []events = FindExternalEvents( );

         if ( events.Length > 0 )
         {
            AddCSharpLine( "public delegate void uScriptEventHandler(object sender, System.EventArgs args);" );
            foreach ( Plug eventPlug in events )
            {
               AddCSharpLine( "[FriendlyName(\"" + eventPlug.FriendlyName + "\")]" );
               AddCSharpLine( "public event uScriptEventHandler " + eventPlug.Name + ";" );

               m_ExternalEvents.Add( eventPlug );
            }
         }


         AddCSharpLine( "" );
         AddCSharpLine( "//external parameters" );         
         foreach ( ExternalConnection external in m_Script.Externals )
         {
            LinkNode [] links = FindLinksByDestination( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               EntityNode node = m_Script.GetNode( link.Source.Guid );

               foreach ( Parameter p in node.Parameters )
               {
                  if ( p.Name == link.Source.Anchor &&
                       true == p.Output )
                  {
                     AddCSharpLine( FormatType(p.Type) + " " + CSharpName(external, p.Name) + " = " + FormatValue(p.Default, p.Type) + ";" );
                     break;
                  }
               }

               //only one link allowed for each external parameter output
               break;
            }

            links = FindLinksBySource( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               EntityNode node = m_Script.GetNode( link.Destination.Guid );

               if ( node is EntityMethod )
               {
                  if ( node.Instance.Name == link.Destination.Anchor )
                  {
                     AddCSharpLine( FormatType(node.Instance.Type) + " " + CSharpName(external) + " = " + FormatValue(node.Instance.Default, node.Instance.Type) + ";" );
                     break;
                  }
               }
            }
         }

         AddCSharpLine( "" );
         AddCSharpLine( "//local nodes" );
         foreach ( LocalNode local in m_Script.UniqueLocals )
         {
            AddCSharpLine( FormatType(local.Value.Type) + " " + CSharpName(local) + " = " + FormatValue(local.Value.Default, local.Value.Type) + ";" );
            
            if ( local.Value.Type == "UnityEngine.GameObject" )
            {
               AddCSharpLine( FormatType(local.Value.Type) + " " + PreviousName(local) + " = null;" );
            }
         }

         AddCSharpLine( "" );
         AddCSharpLine( "//owner nodes" );
         foreach ( OwnerConnection owner in m_Script.Owners )
         {
            AddCSharpLine( FormatType(owner.Connection.Type) + " " + CSharpName(owner) + " = null;" );
         }

         AddCSharpLine( "" );
         AddCSharpLine( "//logic nodes" );

         foreach ( LogicNode logic in m_Script.Logics )
         {
            AddCSharpLine( "//pointer to script instanced logic node" );
            AddCSharpLine( FormatType(logic.Type) + " " + CSharpName(logic, logic.Type) + " = null;" );
            
            foreach ( Parameter parameter in logic.Parameters )
            {
               if ( true == parameter.Input )
               {
                  AddCSharpLine( FormatType(parameter.Type) + " " + CSharpName(logic, parameter.Name) + " = " + FormatValue(parameter.Default, parameter.Type) + ";" );
               }
               else
               {
                  AddCSharpLine( FormatType(parameter.Type) + " " + CSharpName(logic, parameter.Name) + ";" );
               }
            }

            foreach ( Plug output in logic.Outputs )
            {
               AddCSharpLine( "bool " + CSharpName(logic, output.Name) + " = true;" );
            }

            foreach ( string driven in logic.Drivens )
            {
               AddCSharpLine( "bool " + CSharpName(logic, driven) + " = true;" );
            }
         }

         AddCSharpLine( "" );
         AddCSharpLine( "//event nodes" );

         foreach ( EntityEvent entityEvent in m_Script.Events )
         {
            foreach ( Parameter parameter  in entityEvent.Parameters  )
            {
               AddCSharpLine( FormatType(parameter.Type) + " " + CSharpName(entityEvent, parameter.Name) + " = " + FormatValue(parameter.Default, parameter.Type) + ";" );
            }

            if ( entityEvent.Instance.Default != "" )
            {
               AddCSharpLine( FormatType(entityEvent.Instance.Type) + " " + CSharpName(entityEvent, entityEvent.Instance.Name) + " = " + FormatValue(entityEvent.Instance.Default, entityEvent.Instance.Type) + ";" );
            }
         }

         AddCSharpLine( "" );
         AddCSharpLine( "//property nodes" );

         foreach ( EntityProperty entityProperty in m_Script.Properties )
         {
            AddCSharpLine( FormatType(entityProperty.Parameter.Type) + " " + CSharpName(entityProperty, entityProperty.Parameter.Name) + " = " + FormatValue(entityProperty.Parameter.Default, entityProperty.Parameter.Type) + ";" );

            if ( entityProperty.Instance.Default != "" )
            {
               AddCSharpLine( FormatType(entityProperty.Instance.Type) + " " + CSharpName(entityProperty, entityProperty.Instance.Name) + " = " + FormatValue(entityProperty.Instance.Default, entityProperty.ComponentType) + ";" );
            }
         }

         AddCSharpLine( "" );
         AddCSharpLine( "//method nodes" );

         foreach ( EntityMethod entityMethod in m_Script.Methods )
         {
            foreach ( Parameter parameter in entityMethod.Parameters )
            {
               AddCSharpLine( FormatType(parameter.Type) + " " + CSharpName(entityMethod, parameter.Name) + " = " + FormatValue(parameter.Default, parameter.Type) + ";" );
            }

            if ( entityMethod.Instance.Default != "" )
            {
               AddCSharpLine( FormatType(entityMethod.Instance.Type) + " " + CSharpName(entityMethod, entityMethod.Instance.Name) + " = " + FormatValue(entityMethod.Instance.Default, entityMethod.Instance.Type) + ";" );
            }
         }

         AddCSharpLine( "#pragma warning restore 414" );
      }

      private void DefineSetParent( )
      {
         AddCSharpLine( "parentGameObject = g;" );        
         AddCSharpLine( "" );
         
         foreach ( LogicNode logic in m_Script.Logics )
         {
            AddCSharpLine( CSharpName(logic, logic.Type) + ".SetParent(g);" );
         }
      }

      private void DefineStartInitialization( )
      {
         //make sure all components we plan to reference
         //have been placed in their local variables
         AddCSharpLine( CSharpSyncUnityHooksDeclaration( ) + ";" );
         AddCSharpLine( "" );

         //for each logic node, create an script specific instance
         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            if ( NeedsMethod(logicNode, "Start") )
            {
               AddCSharpLine( CSharpName(logicNode, logicNode.Type) + ".Start( );" );
            }
         }
      }
      
      private void DefineAwakeInitialization( )
      {   
         //for each logic node, create an script specific instance
         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            AddCSharpLine( CSharpName(logicNode, logicNode.Type) + " = ScriptableObject.CreateInstance(typeof(" + logicNode.Type +")) as " + FormatType(logicNode.Type) + ";" );
         }
         
         AddCSharpLine( "" );

         //for each logic node event, register event listeners with it
         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            foreach ( Plug eventName in logicNode.Events )
            {
               AddLogicEventListener( logicNode, eventName.Name );
            }
         }
      }

      private void DefineUpdate( )
      {
         if ( true == m_GenerateDebugInfo )
         {
            AddCSharpLine( "//reset each Update, and increments each method call" );
            AddCSharpLine( "//if it ever goes above MaxRelayCallCount before being reset" );
            AddCSharpLine( "//then we assume it is stuck in an infinite loop" );         
            AddCSharpLine( "if ( relayCallCount < MaxRelayCallCount ) relayCallCount = 0;" );
         }

         AddCSharpLine( "//other scripts might have added GameObjects with event scripts" );
         AddCSharpLine( "//so we need to verify all our event listeners are registered" );
         AddCSharpLine( CSharpSyncEventListenersDeclaration( ) + ";" );
         AddCSharpLine( "" );

         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            if ( true == NeedsMethod(logicNode, "Update") )
            {
               AddCSharpLine( CSharpName(logicNode, logicNode.Type) + ".Update( );" );
            }
         }

         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            foreach ( string driven in logicNode.Drivens )
            {
               AddCSharpLine( CSharpRelay(logicNode, driven) + "();" );
            }
         }
      }

      private void DefineLateUpdate( )
      {
         //for each logic node, create an script specific instance
         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            if ( true == NeedsMethod(logicNode, "LateUpdate") )
            {
               AddCSharpLine( CSharpName(logicNode, logicNode.Type) + ".LateUpdate( );" );
            }
         }
      }

      private void DefineFixedUpdate( )
      {
         //for each logic node, create an script specific instance
         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            if ( true == NeedsMethod(logicNode, "FixedUpdate") )
            {
               AddCSharpLine( CSharpName(logicNode, logicNode.Type) + ".FixedUpdate( );" );
            }
         }
      }

      private void DefineOnGUI( )
      {
         //for each logic node, create an script specific instance
         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            if ( true == NeedsMethod(logicNode, "OnGUI") )
            {
               AddCSharpLine( CSharpName(logicNode, logicNode.Type) + ".OnGUI( );" );
            }
         }
      }

      private void DefineSyncUnityHooks( )
      {
         AddCSharpLine( "void " + CSharpSyncUnityHooksDeclaration( ) );
         AddCSharpLine( "{" );
         ++m_TabStack;
   
            //get any references to components currently available
            //which we haven't filled out yet
            foreach ( EntityMethod entityMethod in m_Script.Methods )
            {
               if ( false == entityMethod.IsStatic )
               {
                  if ( entityMethod.Instance.Default != "" )
                  {
                     FillComponent( entityMethod, entityMethod.Instance );
                  }
               }

               foreach ( Parameter p in entityMethod.Parameters )
               {
                  if ( false == p.Input ) continue;
                  FillComponent( entityMethod, p );
               }
            }

            AddCSharpLine( CSharpSyncEventListenersDeclaration( ) + ";" );

            foreach ( EntityProperty entityProperty in m_Script.Properties )
            {
               if ( false == entityProperty.IsStatic )
               {
                  if ( entityProperty.Instance.Default != "" )
                  {
                     FillComponent( entityProperty, entityProperty.Instance );
                  }
               }
            }

            foreach ( LogicNode logicNode in m_Script.Logics )
            {
               foreach ( Parameter p in logicNode.Parameters )
               {
                  if ( false == p.Input ) continue;
                  FillComponent( logicNode, p );
               }
            }

            foreach ( LocalNode localNode in m_Script.UniqueLocals )
            {
               FillComponent( localNode, localNode.Value );
            }

            foreach ( OwnerConnection ownerNode in m_Script.Owners )
            {
               FillComponent( ownerNode, ownerNode.Connection );
            }

         --m_TabStack;
         AddCSharpLine( "}" );
      }

      public void DefineSyncEventListeners( )
      {
         AddCSharpLine( "void " + CSharpSyncEventListenersDeclaration( ) );
         AddCSharpLine( "{" );
         ++m_TabStack;

            foreach ( EntityEvent entityEvent in m_Script.Events )
            {
               if ( false == entityEvent.IsStatic )
               {
                  if ( entityEvent.Instance.Default != "" )
                  {
                     FillComponent( entityEvent, entityEvent.Instance );
                  }
               }
               else
               {
                  SetupEvent( null, entityEvent, true );
               }
            }

         --m_TabStack;
         AddCSharpLine( "}" );
      }

      private void FillComponent(EntityNode node, Parameter parameter)
      {
         Type componentType  = typeof(UnityEngine.Component);
         Type gameObjectType = typeof(UnityEngine.GameObject);
         Type componentArrayType  = typeof(UnityEngine.Component[]);
         Type gameObjectArrayType = typeof(UnityEngine.GameObject[]);

         Type nodeType = uScript.MasterComponent.GetType(parameter.Type);
         if ( null == nodeType ) return;

         if ( true == gameObjectArrayType.IsAssignableFrom(nodeType) )
         {
            //remove curly braces from type declaration
            //so we can use it to cast the object to the array element type
            string type = FormatType(parameter.Type);
            type = type.Substring( 0, type.Length - 2 );

            string []values = Parameter.StringToArray( parameter.Default );

            for ( int i = 0; i < values.Length; i++ )
            {
               if ( values[i].Trim( ) == "" ) continue;

               AddCSharpLine( "if ( null == " + CSharpName(node, parameter.Name) + "[" + i + "] )" );
               AddCSharpLine( "{" );
               ++m_TabStack;

                  if ( uScriptRuntimeConfig.MasterObjectName == EscapeString(values[i].Trim( )) )
                  {
                     AddCSharpLine( CSharpName(node, parameter.Name) + "[" + i + "] = uScript_MasterComponent.LatestMaster;" );
                  }
                  else
                  {
                     AddCSharpLine( CSharpName(node, parameter.Name) + "[" + i + "] = GameObject.Find( \"" + EscapeString(values[i].Trim( )) + "\" ) as " + type + ";" );                     
                  }
                  SetupEventListeners( CSharpName(node, parameter.Name) + "[" + i + "]", node, true );
         
               --m_TabStack;
               AddCSharpLine( "}" );
            }
         }
         else if ( true == componentArrayType.IsAssignableFrom(nodeType) )
         {
            string []values = Parameter.StringToArray( parameter.Default );
         
            //remove curly braces from type declaration
            //so we can use it to cast the object to the array element type
            string type = FormatType(parameter.Type);
            type = type.Substring( 0, type.Length - 2 );

            AddCSharpLine( "{" );
            ++m_TabStack;

            AddCSharpLine( "GameObject gameObject = null;" );
            
            for ( int i = 0; i < values.Length; i++ )
            {
               if ( values[i].Trim( ) == "" ) continue;

               AddCSharpLine( "if ( null == " + CSharpName(node, parameter.Name) + "[" + i + "] )" );
               AddCSharpLine( "{" );               
               ++m_TabStack;

                  if ( uScriptRuntimeConfig.MasterObjectName == EscapeString(values[i].Trim( )) )
                  {
                     AddCSharpLine( "gameObject = uScript_MasterComponent.LatestMaster;" );
                  }
                  else
                  {
                     AddCSharpLine( "gameObject = GameObject.Find( \"" + EscapeString(values[i].Trim( )) + "\" );" );
                  }
               
                  AddCSharpLine( "if ( null != " + "gameObject )" );
         
                  AddCSharpLine( "{" );               
                  ++m_TabStack;
                     AddCSharpLine( CSharpName(node, parameter.Name) + "[" + i + "] = gameObject.GetComponent<" + type + ">();" );
                     AddMissingComponent( CSharpName(node, parameter.Name) + "[" + i + "]", "gameObject", type ); 
                     SetupEventListeners( CSharpName(node, parameter.Name) + "[" + i + "]", node, true );
   
                  --m_TabStack;
                  AddCSharpLine( "}" );               

               --m_TabStack;
               AddCSharpLine( "};" );
            }

            --m_TabStack;
            AddCSharpLine( "};" );
         }
         else if ( true == componentType.IsAssignableFrom(nodeType) )
         {
            if ( parameter.Default != "" )
            {
               AddCSharpLine( "if ( null == " + CSharpName(node, parameter.Name) + " )" );
               AddCSharpLine( "{" );
               ++m_TabStack;

                  if ( uScriptRuntimeConfig.MasterObjectName == EscapeString(parameter.Default) )
                  {
                     AddCSharpLine( "GameObject gameObject = uScript_MasterComponent.LatestMaster;" );
                  }
                  else
                  {
                     AddCSharpLine( "GameObject gameObject = GameObject.Find( \"" + EscapeString(parameter.Default) + "\" );" );
                  }

                  AddCSharpLine( "if ( null != " + "gameObject )" );
            
                  AddCSharpLine( "{" );               
                  ++m_TabStack;
                     AddCSharpLine( CSharpName(node, parameter.Name) + " = gameObject.GetComponent<" + FormatType(parameter.Type) + ">();" );
                     AddMissingComponent( CSharpName(node, parameter.Name), "gameObject", FormatType(parameter.Type) ); 
                     SetupEventListeners( CSharpName(node, parameter.Name), node, true );
               
                  --m_TabStack;
                  AddCSharpLine( "}" );               

               --m_TabStack;
               AddCSharpLine( "}" );
            }
         }
         else if ( true == gameObjectType.IsAssignableFrom(nodeType) )
         {
            if ( true == node is OwnerConnection )
            {
               AddCSharpLine( "if ( null == " + CSharpName(node, parameter.Name) + " )" );
               AddCSharpLine( "{" );
               ++m_TabStack;
                  AddCSharpLine( CSharpName(node, parameter.Name) + " = parentGameObject;" );
                  SetupEventListeners( CSharpName(node, parameter.Name), node, true );
               --m_TabStack;
               AddCSharpLine( "}" );
            }
            else if ( parameter.Default != "" )
            {
               AddCSharpLine( "if ( null == " + CSharpName(node, parameter.Name) + " )" );
               AddCSharpLine( "{" );
               ++m_TabStack;

                  if ( uScriptRuntimeConfig.MasterObjectName == EscapeString(parameter.Default) )
                  {
                     AddCSharpLine( CSharpName(node, parameter.Name) + " = uScript_MasterComponent.LatestMaster;" );
                  }
                  else
                  {
                     AddCSharpLine( CSharpName(node, parameter.Name) + " = GameObject.Find( \"" + EscapeString(parameter.Default) + "\" ) as " + FormatType(parameter.Type) + ";" );
                  }

                  //only set up listeners if it's NOT a variable connecxtion
                  //otherwise they'll be set in the conditional below this
                  if ( false == node is LocalNode )
                  {
                     SetupEventListeners( CSharpName(node, parameter.Name), node, true );
                  }

               --m_TabStack;
               AddCSharpLine( "}" );
            }
            
            //if it's a variable node linked to us
            //then we need to go a few steps further to see if its contents
            //have been modified at runtime.  if they have then
            //we need to register new event listeners
            if ( true == node is LocalNode )
            {
               AddCSharpLine( "//if our game object reference was changed then we need to reset event listeners" );
               AddCSharpLine( "if ( " + PreviousName(node, parameter.Name) + " != " + CSharpName(node, parameter.Name) + " )" );
               AddCSharpLine( "{" );
               ++m_TabStack;

                  AddCSharpLine( "//tear down old listeners" );
                  SetupEventListeners( PreviousName(node, parameter.Name), node, false );
                  AddCSharpLine( "" );

                  AddCSharpLine( PreviousName(node, parameter.Name) + " = " + CSharpName(node, parameter.Name) + ";" );
                  AddCSharpLine( "" );

                  AddCSharpLine( "//setup new listeners" );
                  SetupEventListeners( CSharpName(node, parameter.Name), node, true );

               --m_TabStack;
               AddCSharpLine( "}" );
            }
         }
      }

      private string SetCode( string s )
      {
         string c = m_CSharpString;
         m_CSharpString = s;

         return c;
      }

      private void SetupEventListeners( string eventVariable, EntityNode node, bool setup )
      {
         string currentCode = SetCode( "" );

         ++m_TabStack;
            if ( node is EntityEvent )
            {
               SetupEvent( eventVariable, ((EntityEvent)node), setup );
            }
            else if ( node is LocalNode )
            {
               //if we are a local node, see if there are any event listeners
               //hooked up to us - if so then we need to get the matching component
               //and register the listeners
               LocalNode local = (LocalNode) node;

               foreach ( LinkNode link in m_Script.Links )
               {
                  if ( link.Source.Guid   == local.Guid &&
                       link.Source.Anchor == local.Value.Name )
                  {
                     EntityNode destNode = m_Script.GetNode( link.Destination.Guid );

                     if ( destNode is EntityEvent )
                     {
                        EntityEvent eventNode = (EntityEvent) destNode;
                        if ( link.Destination.Anchor == eventNode.Instance.Name )
                        {
                           SetupEvent( eventVariable, eventNode, setup ); 
                        }
                     }
                  }
               }
            }
            else if ( node is OwnerConnection )
            {
               //if we are an owner node, see if there are any event listeners
               //hooked up to us - if so then we need to get the matching component
               //and register the listeners
               OwnerConnection owner = (OwnerConnection) node;

               foreach ( LinkNode link in m_Script.Links )
               {
                  if ( link.Source.Guid   == owner.Guid &&
                       link.Source.Anchor == owner.Connection.Name )
                  {
                     EntityNode destNode = m_Script.GetNode( link.Destination.Guid );

                     if ( destNode is EntityEvent )
                     {
                        EntityEvent eventNode = (EntityEvent) destNode;
                        if ( link.Destination.Anchor == eventNode.Instance.Name )
                        {
                           SetupEvent( eventVariable, eventNode, setup ); 
                        }
                     }
                  }
               }
            }
         --m_TabStack;

         string newCode = SetCode( currentCode );

         if ( "" != newCode )
         {            
            AddCSharpLine( "if ( null != " + eventVariable + " )" );

            AddCSharpLine( "{" );               

               m_CSharpString += newCode;

            AddCSharpLine( "}" );               
         }
      }

      //default inputs for events which can only be set through the property grid
      //so they are only set once (in SyncUnityHooks)
      //and we add all our event listeners here
      private void SetupEvent( string eventVariable, EntityEvent eventNode, bool setup )
      {
         //if we're setting up then set the inputs
         //if we're tearing down, we can ignore this step
         if ( true == setup )
         {
            foreach ( Parameter p in eventNode.Parameters )
            {
               if ( p.Input == true )
               {
                  if ( true == eventNode.IsStatic )
                  {
                     AddCSharpLine( eventNode.ComponentType + "." + p.Name + " = " + CSharpName(eventNode, p.Name) + ";" );
                  }
                  else
                  {
                     AddCSharpLine( "{" );
                     ++m_TabStack;
                        AddCSharpLine( eventNode.ComponentType + " component = " + eventVariable + ".GetComponent<" + eventNode.ComponentType + ">();" );
                        AddMissingComponent( "component", eventVariable, eventNode.ComponentType ); 

                        AddCSharpLine( "if ( null != component )" );
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                           AddCSharpLine( "component." + p.Name + " = " + CSharpName(eventNode, p.Name) + ";" );
                        --m_TabStack;
                        AddCSharpLine( "}" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                  }
               }
            }
         }

         AddCSharpLine( "{" );
         ++m_TabStack;
            AddEventListener( eventVariable, eventNode, setup );
         --m_TabStack;
         AddCSharpLine( "}" );
      }

      private void AddMissingComponent(string componentVariable, string gameObjectVariable, string componentType)
      {
         Type type = uScript.MasterComponent.GetType(componentType);
         if ( null != type && typeof(uScriptEvent).IsAssignableFrom(type) )
         {
            AddCSharpLine( "if ( null == " + componentVariable + " )" );
            AddCSharpLine( "{" );
            ++m_TabStack;                 
               AddCSharpLine( componentVariable + " = " + gameObjectVariable + ".AddComponent<" + componentType + ">();" );
            --m_TabStack;
            AddCSharpLine( "}" );
         }
      }

      private void DefineEvents( )
      {
         //for every registered event listener
         //define the function the event will call
         foreach ( EntityEvent entityEvent in m_Script.Events )
         {
            foreach ( Plug output in entityEvent.Outputs )
            {
               DefineEntityEvent( entityEvent, output.Name );
            }
         }

         //for every registered logic node event listener
         //define the function the event will call
         foreach ( LogicNode logicNode in m_Script.Logics )
         {
            foreach ( Plug eventName in logicNode.Events )
            {
               DefineLogicEvent( logicNode, eventName.Name );
            }
         }

         //for every external node
         //define the function the event will call
         foreach ( ExternalConnection external in m_Script.Externals )
         {
            DefineExternalInput( external );
         }

         //then for every node linked to the event listener or logic listener
         //define a relay function the event will call
         foreach ( EntityNode entityNode in m_Script.EntityNodes )
         {
            if ( false == entityNode is LinkNode )
            {
               DefineRelay( entityNode );
            }
         }

         DefineExternalDrivens( );
      }

      //create the function which the event listener will call
      private void DefineEntityEvent( EntityEvent entityEvent, string output )
      {
         AddCSharpLine( "void " + CSharpEventDeclaration(entityEvent, output) + "(object o, " + entityEvent.EventArgs + " e)" );
         AddCSharpLine( "{" );

         ++m_TabStack;

            int i = 0;

            //all we want to do for an entityevent is output the variables
            //then call the relays
            AddCSharpLine( "//fill globals" );
            foreach ( Parameter parameter in entityEvent.Parameters )
            {
               //only allow output parameters, those come through in the event args
               if ( parameter.Input == true ) continue;

               AddCSharpLine( CSharpName(entityEvent, parameter.Name) + " = e." + parameter.Name + ";" );
               ++i;
            }

            AddCSharpLine( "//relay event to nodes" );
            AddCSharpLine( CSharpRelay(entityEvent, output) + "( );" );

         --m_TabStack;

         AddCSharpLine( "}" );
         AddCSharpLine( "" );
      }

      private string[] FindExternalOutputs( )
      {
         List<string> externalLinks = new List<string>( );

         LinkNode [] links;

         foreach ( ExternalConnection external in m_Script.Externals )
         {
            links = FindLinksByDestination( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               EntityNode node = m_Script.GetNode( link.Source.Guid );
            
               if ( node is EntityMethod ) 
               {
                  EntityMethod method = (EntityMethod) node;

                  if ( link.Source.Anchor == method.Output.Name )
                  {
                     externalLinks.Add( CSharpExternalOutputDeclaration(external.Name.Default) );
                  }
               }
               else if ( node is LogicNode ) 
               {
                  LogicNode logic = (LogicNode) node;

                  foreach ( Plug output in logic.Outputs )
                  {
                     if ( link.Source.Anchor == output.Name )
                     {
                        externalLinks.Add( CSharpExternalOutputDeclaration(external.Name.Default) );
                     }
                  }
               }
            
               //only needs to be defined once, even if multiple nodes are connected to it
               if ( externalLinks.Count > 0 )
               {
                  break;
               }
            }
         }

         return externalLinks.ToArray( );
      }

      private Plug[] FindExternalOutputProperties( )
      {
         List<Plug> externalLinks = new List<Plug>( );

         LinkNode [] links;

         foreach ( ExternalConnection external in m_Script.Externals )
         {
            links = FindLinksByDestination( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               EntityNode node = m_Script.GetNode( link.Source.Guid );
            
               if ( node is EntityMethod ) 
               {
                  EntityMethod method = (EntityMethod) node;

                  if ( link.Source.Anchor == method.Output.Name )
                  {
                     externalLinks.Add( CSharpExternalOutputPropertyDeclaration(external.Name.Default) );
                  }
               }
               else if ( node is LogicNode ) 
               {
                  LogicNode logic = (LogicNode) node;

                  foreach ( Plug output in logic.Outputs )
                  {
                     if ( link.Source.Anchor == output.Name )
                     {
                        externalLinks.Add( CSharpExternalOutputPropertyDeclaration(external.Name.Default) );
                     }
                  }
               }

               //only needs to be defined once, even if multiple nodes are connected to it
               if ( externalLinks.Count > 0 )
               {
                  break;
               }
            }
         }

         return externalLinks.ToArray( );
      }
      
      private Plug[] FindExternalEvents( )
      {
         List<Plug> externalLinks = new List<Plug>( );

         LinkNode [] links;

         foreach ( ExternalConnection external in m_Script.Externals )
         {
            links = FindLinksByDestination( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               EntityNode node = m_Script.GetNode( link.Source.Guid );
            
               if ( node is EntityEvent ) 
               {
                  EntityEvent entityEvent = (EntityEvent) node;

                  foreach ( Plug output in entityEvent.Outputs )
                  {
                     if ( link.Source.Anchor == output.Name )
                     {
                        externalLinks.Add( CSharpExternalEventDeclaration(external.Name.Default) );
                        break;
                     }
                  }
               }
               else if ( node is LogicNode ) 
               {
                  LogicNode logic = (LogicNode) node;

                  foreach ( Plug eventName in logic.Events )
                  {
                     if ( link.Source.Anchor == eventName.Name )
                     {
                        externalLinks.Add( CSharpExternalEventDeclaration(external.Name.Default) );
                        break;
                     }
                  }
               }

               //only needs to be defined once, even if multiple nodes are connected to it
               if ( externalLinks.Count > 0 )
               {
                  break;
               }
            }
         }

         return externalLinks.ToArray( );
      }
      
      //create the external function outsiders can call
      private void DefineExternalDrivens( )
      {
         //all output args
         string args = "";
         
         foreach ( ExternalConnection external in m_Script.Externals )
         {
            LinkNode []links = FindLinksByDestination( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               EntityNode node = m_Script.GetNode( link.Source.Guid );

               foreach ( Parameter p in node.Parameters )
               {
                  //we don't allow refs or inputs on drivens
                  //because uScript standard doesn't allow changing of input variables
                  //without a pulse in
                  if ( p.Name == link.Source.Anchor )
                  {
                     args += "out " + FormatType(p.Type) + " " + CSharpExternalParameterDeclaration(external.Name.Default).Name + ", ";
                  }
               }

               //only needs to be defined once, even if multiple nodes are connected to it
               break;
            }
         }

         //remove trailing comma from last input arg
         if ( args != "" ) args = args.Substring( 0, args.Length - 2 );
 
         foreach ( LogicNode logic in m_Script.Logics )
         {
            foreach ( string driven in logic.Drivens )
            {
               DefineExternalDriven( logic, driven, args );
            }
         }
      }

      void DefineExternalDriven( LogicNode node, string driven, string args )
      {
         m_Drivens.Add( CSharpExternalDriven(node, driven) );

         AddCSharpLine( "[Driven]" );
         AddCSharpLine( "public bool " + CSharpExternalDriven(node, driven) + "( " + args + " )" );
         AddCSharpLine( "{" );
         ++m_TabStack;

            //transfer our member variables modified internally to the external call
            foreach ( ExternalConnection external in m_Script.Externals )
            {
               LinkNode []outputs = FindLinksByDestination( external.Guid, external.Connection );

               foreach ( LinkNode link in outputs )
               {
                  EntityNode parameterNode = m_Script.GetNode( link.Source.Guid );

                  foreach ( Parameter p in parameterNode.Parameters )
                  {
                     if ( p.Name == link.Source.Anchor )
                     {
                        //external connections don't have a parameter
                        //because they take on whatever parameter they link to
                        Parameter parameter = new Parameter( );
                        parameter.Name = external.Connection;
                        parameter.Type = p.Type;
                        SyncSlaveConnections(external, new Parameter[]{ parameter } );

                        AddCSharpLine( CSharpExternalParameterDeclaration(external.Name.Default).Name + " = " + CSharpName(external, p.Name) + ";" );
                     }
                  }

                  //only one link allowed for each external parameter output
                  break;
               }
            }

            AddCSharpLine( "return " + CSharpName(node, driven) + ";" );

         --m_TabStack;
         AddCSharpLine( "}" );
         AddCSharpLine( "" );
      }
      
      //create the external function outsiders can call
      private void DefineExternalInput( ExternalConnection externalInput )
      {
         Hashtable uniqueParameters = new Hashtable( );

         foreach ( ExternalConnection external in m_Script.Externals )
         {
            if ( null != uniqueParameters[ external.Name.Default ] ) continue;

            LinkNode []links = FindLinksBySource( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               EntityNode node = m_Script.GetNode( link.Destination.Guid );

               foreach ( Parameter p in node.Parameters )
               {
                  if ( p.Name == link.Destination.Anchor )
                  {
                     uniqueParameters[ external.Name.Default ] = p;
                  }
               }
            
               if ( node.Instance.Name == link.Destination.Anchor )
               {
                  uniqueParameters[ external.Name.Default ] = node.Instance;
               }

               //only needs to be defined once, even if multiple nodes are connected to it
               break;
            }
         }

         foreach ( ExternalConnection external in m_Script.Externals )
         {
            LinkNode []links = FindLinksByDestination( external.Guid, external.Connection );

            foreach ( LinkNode link in links )
            {
               //the link ends at our external
               //so if it's already used as a source, change it to a ref
               if ( null != uniqueParameters[ external.Name.Default ] ) 
               {
                  Parameter p = (Parameter) uniqueParameters[ external.Name.Default ];
                  p.Output = true;
                  uniqueParameters[ external.Name.Default ] = p;
                  continue;
               }

               EntityNode node = m_Script.GetNode( link.Source.Guid );

               foreach ( Parameter p in node.Parameters )
               {
                  if ( p.Name == link.Source.Anchor )
                  {
                     uniqueParameters[ external.Name.Default ] = p;
                  }
               }

               //only one link allowed for each external parameter output
               break;
            }
         }

         string args = "";

         foreach ( string key in uniqueParameters.Keys )
         {
            Parameter p  = (Parameter) uniqueParameters[ key ];

            if ( true == p.Input && false == p.Output )
            {
               args += "[FriendlyName(\"" + CSharpExternalParameterDeclaration(key).FriendlyName + "\")] ";
               args += FormatType(p.Type) + " " + CSharpExternalParameterDeclaration(key).Name + ", ";
            }
            else if ( true == p.Input && true == p.Output )
            {
               args += "[FriendlyName(\"" + CSharpExternalParameterDeclaration(key).FriendlyName + "\")] ";
               args += "ref " + FormatType(p.Type) + " " + CSharpExternalParameterDeclaration(key).Name + ", ";
            }
            else if ( false == p.Input && true == p.Output )
            {
               args += "[FriendlyName(\"" + CSharpExternalParameterDeclaration(key).FriendlyName + "\")] ";
               args += "out " + FormatType(p.Type) + " " + CSharpExternalParameterDeclaration(key).Name + ", ";
            }
         }
 
         if ( args != "" ) args = args.Substring( 0, args.Length - 2 );
         
         LinkNode []relays = FindLinksBySource( externalInput.Guid, externalInput.Connection );
         
         List<LinkNode.Connection> allowedRelays = new List<LinkNode.Connection>( );
         
         foreach ( LinkNode relayLink in relays )
         {
            EntityNode node = m_Script.GetNode( relayLink.Destination.Guid );
            
            bool allowLink = false;

            if ( node is EntityMethod )
            {
               EntityMethod method = (EntityMethod) node;

               if ( method.Input.Name == relayLink.Destination.Anchor )
               {
                  allowLink = true;
               }
            }
            else if ( node is LogicNode )
            {
               LogicNode logic = (LogicNode) node;

               foreach ( Plug input in logic.Inputs )
               {
                  if ( input.Name == relayLink.Destination.Anchor )
                  {
                     allowLink = true;
                  }
               }
            }

            if ( true == allowLink )
            {
               allowedRelays.Add( relayLink.Destination );
            }

            //only one set of external parameters per script            
            //they match for every method signature
            if ( 0 == m_ExternalParameters.Count )
            {
               foreach ( string key in uniqueParameters.Keys )
               {
                  Parameter p  = (Parameter) uniqueParameters[ key ];
               
                  Plug plug = CSharpExternalParameterDeclaration(key);

                  Parameter clone = p;
                  clone.FriendlyName = plug.FriendlyName;
                  clone.Name  = plug.Name;
                  clone.State = Parameter.VisibleState.Visible;

                  m_ExternalParameters.Add( clone );
               }
            }

            if ( true == allowLink ) break;
         }
         
         if ( allowedRelays.Count > 0 )
         {
            DefineExternalInput( externalInput, allowedRelays.ToArray( ), args );
         }
      }

      void DefineExternalInput( ExternalConnection externalInput, LinkNode.Connection []connections, string args )
      {
         Plug inputPlug = CSharpExternalInputDeclaration(externalInput.Name.Default);
         m_ExternalInputs.Add( inputPlug );

         AddCSharpLine( "[FriendlyName(\"" + inputPlug.FriendlyName + "\")]" );
         AddCSharpLine( "public void " + inputPlug.Name + "( " + args + " )" );
         AddCSharpLine( "{" );

         ++m_TabStack;

         PrintDebug( externalInput );

         //set all output links to false
         string []outputLinks = FindExternalOutputs( );

         foreach ( string s in outputLinks )
         {
            AddCSharpLine( s + " = false;" );
         }

         AddCSharpLine( "" );


         //transfer input args to our member variables
         Hashtable filledExternals = new Hashtable( );
         foreach ( ExternalConnection external in m_Script.Externals )
         {
            LinkNode []inputs = FindLinksBySource( external.Guid, external.Connection );

            foreach ( LinkNode link in inputs )
            {
               EntityNode parameterNode = m_Script.GetNode( link.Destination.Guid );

               foreach ( Parameter p in parameterNode.Parameters )
               {
                  if ( p.Name == link.Destination.Anchor )
                  {
                     AddCSharpLine( CSharpName(parameterNode, p.Name) + " = " + CSharpExternalParameterDeclaration(external.Name.Default).Name + ";" );
                     SyncReferencedGameObject( parameterNode, p );
                  }
               }

               if ( parameterNode.Instance.Name == link.Destination.Anchor )
               {
                  if ( false == filledExternals.Contains(external.Guid) )
                  {
                     AddCSharpLine( CSharpName(external) + " = " + CSharpExternalParameterDeclaration(external.Name.Default).Name + ";" );
                     filledExternals[ external.Guid ] = external;
                  }
               }
            }

            //external connections don't have a parameter
            //because they take on whatever parameter they link to
            Parameter parameter = new Parameter( );
            parameter.Name = external.Connection;
            RefreshSetProperties( external, new Parameter[] {parameter} );
         }

         foreach ( LinkNode.Connection connection in connections )
         {
            EntityNode node = m_Script.GetNode( connection.Guid );
            AddCSharpLine( CSharpRelay(node, connection.Anchor) + "( );" );
         }

         //transfer our member variables to the output args
         foreach ( ExternalConnection external in m_Script.Externals )
         {
            LinkNode []outputs = FindLinksByDestination( external.Guid, external.Connection );

            foreach ( LinkNode link in outputs )
            {
               EntityNode parameterNode = m_Script.GetNode( link.Source.Guid );

               foreach ( Parameter p in parameterNode.Parameters )
               {
                  if ( p.Name == link.Source.Anchor )
                  {
                     //external connections don't have a parameter
                     //because they take on whatever parameter they link to
                     Parameter parameter = new Parameter( );
                     parameter.Name = external.Connection;
                     parameter.Type = p.Type;
                     SyncSlaveConnections(external, new Parameter[]{ parameter } );

                     AddCSharpLine( CSharpExternalParameterDeclaration(external.Name.Default).Name + " = " + CSharpName(external, p.Name) + ";" );
                  }
               }

               //only one link allowed for each external parameter out
               break;
            }
         }

         --m_TabStack;

         AddCSharpLine( "}" );
         AddCSharpLine( "" );
      }

      //create the function which the event listener will call
      private void DefineLogicEvent( LogicNode logicNode, string eventName )
      {
         AddCSharpLine( "void " + CSharpEventDeclaration(logicNode, eventName) + "(object o, System.EventArgs e)" );
         AddCSharpLine( "{" );

         ++m_TabStack;

            AddCSharpLine( "//relay event to nodes" );
            AddCSharpLine( CSharpRelay(logicNode, eventName) + "( );" );

         --m_TabStack;

         AddCSharpLine( "}" );
         AddCSharpLine( "" );
      }

      //if we're hit we allow any outputs which were linked to us
      private void RelayToExternal( ExternalConnection external )
      {
         LinkNode [] links = FindLinksByDestination( external.Guid, external.Connection );

         foreach ( LinkNode link in links )
         {
            EntityNode node = m_Script.GetNode( link.Source.Guid );
         
            if ( node is EntityEvent ) 
            {
               EntityEvent entityEvent = (EntityEvent) node;

               foreach ( Plug output in entityEvent.Outputs )
               {
                  if ( link.Source.Anchor == output.Name )
                  {
                     AddCSharpLine( "if ( " + CSharpExternalEventDeclaration(external.Name.Default).Name + " != null )" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;
                        AddCSharpLine( CSharpExternalEventDeclaration(external.Name.Default).Name + "( this, new System.EventArgs());" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                     break;
                  }
               }
            }
            else if ( node is EntityMethod ) 
            {
               EntityMethod entityMethod = (EntityMethod) node;

               if ( link.Source.Anchor == entityMethod.Output.Name )
               {
                  AddCSharpLine( CSharpExternalOutputDeclaration(external.Name.Default) + " = true;" );
               }
            }
            else if ( node is LogicNode ) 
            {
               LogicNode logic = (LogicNode) node;

               foreach ( Plug eventName in logic.Events )
               {
                  if ( link.Source.Anchor == eventName.Name )
                  {
                     AddCSharpLine( "if ( " + CSharpExternalEventDeclaration(external.Name.Default).Name + " != null )" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;
                        AddCSharpLine( CSharpExternalEventDeclaration(external.Name.Default).Name + "( this, new System.EventArgs());" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                     break;
                  }
               }

               foreach ( Plug output in logic.Outputs )
               {
                  if ( link.Source.Anchor == output.Name )
                  {
                     AddCSharpLine( CSharpExternalOutputDeclaration(external.Name.Default) + " = true;" );
                     break;
                  }
               }
            }

            //only needs to set once, even if multiple nodes are connected to it
            //break;
         }
      }

      //define the function which our event listeners will call
      //when an entity event is triggered
      private void RelayToEvent( EntityEvent receiver, string eventName )
      {
         List<Parameter> outputList = new List<Parameter>( );

         //figure out where our outgoing links go
         //and set those variables directly
         foreach ( Parameter parameter in receiver.Parameters )
         {
            LinkNode []argLinks = FindLinksBySource( receiver.Guid, parameter.Name );

            foreach ( LinkNode link in argLinks )
            {
               EntityNode argNode = m_Script.GetNode( link.Destination.Guid );

               //set variable directly based on the last set event argument
               AddCSharpLine( CSharpName(argNode, link.Destination.Anchor) + " = " + CSharpName(receiver, parameter.Name) + ";" );
               outputList.Add( parameter );

               foreach ( Parameter p in argNode.Parameters )
               {
                  if ( p.Name == link.Destination.Anchor )
                  {
                     SyncReferencedGameObject( argNode, parameter );
                     break;
                  }
               }

               if ( argNode.Instance.Name == link.Destination.Anchor )
               {
                  SyncReferencedGameObject( argNode, argNode.Instance );
               }
            }
         }

         //force any potential entites affected to update
         RefreshSetProperties( receiver, outputList.ToArray( ) );

         //call anyone else connected to us
         CallRelays(receiver.Guid, eventName);
      }

      //define the function which a node will call if they're
      //triggering an entity method
      private void RelayToMethod( EntityMethod receiver )
      {
         //make sure any properties or variables connected to us are up to date
         SyncSlaveConnections( receiver, receiver.Parameters );

         Parameter returnParam = Parameter.Empty;
         string args = "";

         foreach ( Parameter parameter in receiver.Parameters )
         {
            if ( true == parameter.Input && true == parameter.Output )
            {
               args += "ref " + CSharpName(receiver, parameter.Name) + ", ";
            }
            else if ( true == parameter.Output )
            {
               if ( parameter.Name == "Return" )
               {
                  returnParam = parameter;
               }
               else
               {
                  args += "out " + CSharpName(receiver, parameter.Name) + ", ";
               }
            }
            else if ( true == parameter.Input )
            {
               args += CSharpName(receiver, parameter.Name) + ", ";
            }
         }

         if ( args != "" ) args = args.Substring( 0, args.Length - 2 );


         if ( false == receiver.IsStatic )
         {
            AddCSharpLine( receiver.ComponentType + " component;" );
   
            LinkNode []instanceLinks = FindLinksByDestination( receiver.Guid, receiver.Instance.Name );

            foreach ( LinkNode link in instanceLinks )
            {
               EntityNode node = m_Script.GetNode( link.Source.Guid );

               if ( returnParam != Parameter.Empty )
               {
                  AddCSharpLine( "component = " + CSharpName(node) + ".GetComponent<" + receiver.ComponentType + ">();" );
                  AddCSharpLine( "if ( null != component )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;

                     AddCSharpLine( CSharpName(receiver, returnParam.Name) + " = component." + receiver.Input.Name + "(" + args + ");" );                     

                  --m_TabStack;
                  AddCSharpLine( "}" );

                  //only one instance link supported because of the return parameter - this should be enforced
                  //in the editor - this is just for a sanity check
                  break;
               }
               else
               {
                  AddCSharpLine( "component = " + CSharpName(node) + ".GetComponent<" + receiver.ComponentType + ">();" );
                  AddCSharpLine( "if ( null != component )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;

                     AddCSharpLine( "component." + receiver.Input.Name + "(" + args + ");" );            

                  --m_TabStack;
                  AddCSharpLine( "}" );
               }
            }

            //only one instance because of the return parameter
            if ( receiver.Instance.Default != "" )
            {
               if ( returnParam != Parameter.Empty )
               {
                  //only one instance supported because of the return parameter - this should be enforced
                  //in the editor - this is just for a sanity check
                  if ( instanceLinks.Length == 0 )
                  {
                     AddCSharpLine( "component = " + CSharpName(receiver, receiver.Instance.Name) + ".GetComponent<" + receiver.ComponentType + ">();" );
                     AddCSharpLine( "if ( null != component )" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;

                        AddCSharpLine( CSharpName(receiver, returnParam.Name) + " = component." + receiver.Input.Name + "(" + args + ");" );            

                     --m_TabStack;
                     AddCSharpLine( "}" );
                  }
               }
               else
               {
                  AddCSharpLine( "component = " + CSharpName(receiver, receiver.Instance.Name) + ".GetComponent<" + receiver.ComponentType + ">();" );
                  AddCSharpLine( "if ( null != component )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;

                     AddCSharpLine( "component." + receiver.Input.Name + "(" + args + ");" );            

                  --m_TabStack;
                  AddCSharpLine( "}" );
               }
            }
         }
         else //static static receiver
         {
            if ( returnParam != Parameter.Empty )
            {
               AddCSharpLine( CSharpName(receiver, returnParam.Name) + " = " + receiver.ComponentType + "." + receiver.Input.Name + "(" + args + ");" );            
            }
            else
            {
               AddCSharpLine( receiver.ComponentType + "." + receiver.Input.Name + "(" + args + ");" );            
            }
         }

         //push the output values
         //to all the links we connect out to
         foreach ( Parameter parameter in receiver.Parameters )
         {
            if ( false == parameter.Output ) continue;

            LinkNode []argLinks = FindLinksBySource( receiver.Guid, parameter.Name );

            foreach ( LinkNode link in argLinks )
            {
               EntityNode argNode = m_Script.GetNode( link.Destination.Guid );
               AddCSharpLine( CSharpName(argNode, link.Destination.Anchor) + " = " + CSharpName(receiver, parameter.Name) + ";" );

               foreach ( Parameter p in argNode.Parameters )
               {
                  if ( p.Name == link.Destination.Anchor )
                  {
                     SyncReferencedGameObject( argNode, parameter );
                     break;
                  }
               }

               if ( argNode.Instance.Name == link.Destination.Anchor )
               {
                  SyncReferencedGameObject( argNode, argNode.Instance );
               }
            }
         }

         //force any potential entites affected to update
         RefreshSetProperties( receiver, receiver.Parameters );

         //call anyone else connected to us
         CallRelays(receiver.Guid, receiver.Output.Name);
      }

      //are any relay functions connected to the point
      //defined in the source parameters
      private bool HasRelays(Guid guid, string name)
      {
         foreach ( LinkNode link in m_Script.Links )
         {
            if ( link.Source.Anchor == name &&
                 link.Source.Guid   == guid )
            {
               return true;
            }
         }

         return false;
      }

      //call any relay functions connected to the point
      //defined in the source parameters
      private void CallRelays(Guid guid, string name)
      {
         foreach ( LinkNode link in m_Script.Links )
         {
            if ( link.Source.Anchor == name &&
                 link.Source.Guid   == guid )
            {
               AddCSharpLine( CSharpRelay(m_Script.GetNode(link.Destination.Guid), link.Destination.Anchor) + "();" );
            }
         }
      }

      //define a function which a node will call if
      //they are connected to a logic node
      private void RelayToLogic( LogicNode receiver, string methodName )
      {
         Parameter returnParam = Parameter.Empty;
         string args = "";

         foreach ( Parameter parameter in receiver.Parameters )
         {
            if ( true == parameter.Input && true == parameter.Output )
            {
               args += "ref " + CSharpName(receiver, parameter.Name) + ", ";
            }
            else if ( true == parameter.Output )
            {
               if ( parameter.Name == "Return" )
               {
                  returnParam = parameter;
               }
               else
               {
                  args += "out " + CSharpName(receiver, parameter.Name) + ", ";
               }
            }
            else if ( true == parameter.Input )
            {
               args += CSharpName(receiver, parameter.Name) + ", ";
            }
         }

         if ( args != "" ) args = args.Substring( 0, args.Length - 2 );
         
         //make sure any properties or variables connected to us are up to date
         SyncSlaveConnections( receiver, receiver.Parameters );

         if ( returnParam != Parameter.Empty )
         {
            AddCSharpLine( CSharpName(receiver, returnParam.Name) + " = " + CSharpName(receiver, receiver.Type) + "." + methodName + "(" + args + ");" );            
         }
         else
         {
            AddCSharpLine( CSharpName(receiver, receiver.Type) + "." + methodName + "(" + args + ");" );            
         }

         //use previously saved temp variables to push the values
         //to all the links we connect out to
         foreach ( Parameter parameter in receiver.Parameters )
         {
            if ( false == parameter.Output ) continue;

            LinkNode []argLinks = FindLinksBySource( receiver.Guid, parameter.Name );

            foreach ( LinkNode link in argLinks )
            {
               EntityNode argNode = m_Script.GetNode( link.Destination.Guid );
               AddCSharpLine( CSharpName(argNode, link.Destination.Anchor) + " = " + CSharpName(receiver, parameter.Name) + ";" );

               foreach ( Parameter p in argNode.Parameters )
               {
                  if ( p.Name == link.Destination.Anchor )
                  {
                     SyncReferencedGameObject( argNode, parameter );
                     break;
                  }
               }

               if ( argNode.Instance.Name == link.Destination.Anchor )
               {
                  SyncReferencedGameObject( argNode, argNode.Instance );
               }
            }
         }

         //force any potential entites affected to update
         RefreshSetProperties( receiver, receiver.Parameters );

         AddCSharpLine( "" );
         AddCSharpLine( "//save off values because, if there are multiple, our relay logic could cause them to change before the next value is tested" );

         int i = 0;

         //call anyone else connected to our outputs
         //if the result of the logic node has set our output to true
         foreach ( Plug output in receiver.Outputs )
         {
            if ( true == HasRelays(receiver.Guid, output.Name) )
            {
               AddCSharpLine( "bool test_" + (i++) + " = " + CSharpName(receiver, receiver.Type) + "." + output.Name + ";" );
            }
         }

         AddCSharpLine( "" );
         i = 0;

         //call anyone else connected to our outputs
         //if the result of the logic node has set our output to true
         foreach ( Plug output in receiver.Outputs )
         {
            if ( true == HasRelays(receiver.Guid, output.Name) )
            {
               AddCSharpLine( "if ( test_" + (i++) + " == true )" );
               AddCSharpLine( "{" );
               ++m_TabStack;
                  CallRelays(receiver.Guid, output.Name);
               --m_TabStack;
               AddCSharpLine( "}" );
            }
         }
      }

      //define a function which a node will if a logic node implements a 'driven' function
      private void DefineDriven( LogicNode receiver, string methodName )
      {
         string args = "";

         foreach ( Parameter parameter in receiver.Parameters )
         {
            //we don't allow refs or inputs on drivens
            //because uScript standard doesn't allow changing of input variables
            //without a pulse in
            if ( true == parameter.Output )
            {
               if ( parameter.Name == "Return" )
               {
                  //do nothing, there shouldn't be one for a driven node
               }
               else
               {
                  args += "out " + CSharpName(receiver, parameter.Name) + ", ";
               }
            }
         }

         if ( args != "" ) args = args.Substring( 0, args.Length - 2 );
         
         //make sure any properties or variables connected to us are up to date
         SyncSlaveConnections( receiver, receiver.Parameters );

         AddCSharpLine( CSharpName(receiver, methodName) + " = " + CSharpName(receiver, receiver.Type) + "." + methodName + "(" + args + ");" );            

         AddCSharpLine( "if ( true == " + CSharpName(receiver, methodName) + " )" );
         AddCSharpLine( "{" );
         ++m_TabStack;

            //use previously saved temp variables to push the values
            //to all the links we connect out to
            foreach ( Parameter parameter in receiver.Parameters )
            {
               if ( false == parameter.Output ) continue;

               LinkNode []argLinks = FindLinksBySource( receiver.Guid, parameter.Name );

               foreach ( LinkNode link in argLinks )
               {
                  EntityNode argNode = m_Script.GetNode( link.Destination.Guid );
                  AddCSharpLine( CSharpName(argNode, link.Destination.Anchor) + " = " + CSharpName(receiver, parameter.Name) + ";" );

                  foreach ( Parameter p in argNode.Parameters )
                  {
                     if ( p.Name == link.Destination.Anchor )
                     {
                        SyncReferencedGameObject( argNode, parameter );
                        break;
                     }
                  }

                  if ( argNode.Instance.Name == link.Destination.Anchor )
                  {
                     SyncReferencedGameObject( argNode, argNode.Instance );
                  }
               }
            }

            //force any potential entites affected to update
            RefreshSetProperties( receiver, receiver.Parameters );

            //call anyone else connected to our outputs
            //if the result of the logic node has set our output to true
            foreach ( Plug output in receiver.Outputs )
            {
               if ( true == HasRelays(receiver.Guid, output.Name) )
               {
                  AddCSharpLine( "if ( " + CSharpName(receiver, receiver.Type) + "." + output.Name + " == true )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;
                     CallRelays(receiver.Guid, output.Name);
                  --m_TabStack;
                  AddCSharpLine( "}" );
               }
            }

         --m_TabStack;
         AddCSharpLine( "}" );
      }
      
      
      //define functions which get called by node connections
      private void DefineRelay( EntityNode receiver )
      {
         //no relays, these are only containers
         if ( receiver is LocalNode )        return;
         if ( receiver is EntityProperty )   return;

         if ( receiver is EntityMethod )
         {
            AddCSharpLine( "void " + CSharpRelay(receiver, ((EntityMethod)receiver).Input.Name) + "()" );
            AddCSharpLine( "{" );

            ++m_TabStack;

               if ( true == m_GenerateDebugInfo )
               {
                  AddCSharpLine( "if ( relayCallCount++ < MaxRelayCallCount )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;

                     PrintDebug( receiver );
                     RelayToMethod( (EntityMethod) receiver );

                  --m_TabStack;
                  AddCSharpLine( "}" );
                  AddCSharpLine( "else" );               
                  AddCSharpLine( "{" );
                  ++m_TabStack;

                     AddCSharpLine( "uScriptDebug.Log( \"Possible infinite loop detected in uScript " + m_Script.Name + " at " + ((EntityMethod)receiver).ComponentType + ".  " +
                                    "If this is in error you can change the Maximum Node Recursion in the Preferences Panel and regenerate the script.\", uScriptDebug.Type.Error);" );

                  --m_TabStack;
                  AddCSharpLine( "}" );
               }
               else
               {
                  RelayToMethod( (EntityMethod) receiver );
               }

            --m_TabStack;

            AddCSharpLine( "}" );
            AddCSharpLine( "" );
         }
         if ( receiver is EntityEvent ) 
         {
            EntityEvent entityEvent = (EntityEvent) receiver;

            foreach ( Plug eventName in entityEvent.Outputs )
            {
               AddCSharpLine( "void " + CSharpRelay(receiver, eventName.Name) + "()" );
               AddCSharpLine( "{" );

               ++m_TabStack;

                  if ( true == m_GenerateDebugInfo )
                  {
                     //no need to wrap call count checking
                     //because this is an event coming in from Unity
                     PrintDebug( receiver );
                     RelayToEvent( entityEvent, eventName.Name );
                  }
                  else
                  {
                     RelayToEvent( entityEvent, eventName.Name );
                  }

               --m_TabStack;

               AddCSharpLine( "}" );
               AddCSharpLine( "" );
            }
         }
         if ( receiver is ExternalConnection )
         {
            ExternalConnection external = (ExternalConnection) receiver;

            AddCSharpLine( "void " + CSharpRelay(receiver, external.Connection) + "()" );
            AddCSharpLine( "{" );

            ++m_TabStack;

               if ( true == m_GenerateDebugInfo )
               {
                  AddCSharpLine( "if ( relayCallCount++ < MaxRelayCallCount )" );
                  AddCSharpLine( "{" );
                  ++m_TabStack;

                     PrintDebug( receiver );
                     RelayToExternal( external );

                  --m_TabStack;
                  AddCSharpLine( "}" );
                  AddCSharpLine( "else" );               
                  AddCSharpLine( "{" );
                  ++m_TabStack;

                     AddCSharpLine( "uScriptDebug.Log( \"Possible infinite loop detected in uScript " + m_Script.Name + " at " + external.Name.Default + ".  " + 
                                    "If this is in error you can change the Maximum Node Recursion in the Preferences Panel and regenerate the script.\", uScriptDebug.Type.Error);" );
                  --m_TabStack;
                  AddCSharpLine( "}" );
               }
               else
               {
                  RelayToExternal( external );
               }
               
            --m_TabStack;

            AddCSharpLine( "}" );
            AddCSharpLine( "" );
         }
         if ( receiver is LogicNode ) 
         {
            LogicNode logicNode = (LogicNode) receiver;

            foreach ( Plug eventName in logicNode.Events )
            {
               AddCSharpLine( "void " + CSharpRelay(receiver, eventName.Name) + "()" );
               AddCSharpLine( "{" );

               ++m_TabStack;

                  if ( true == m_GenerateDebugInfo )
                  {
                     AddCSharpLine( "if ( relayCallCount++ < MaxRelayCallCount )" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;

                        PrintDebug( receiver );                  
                        CallRelays(receiver.Guid, eventName.Name);

                     --m_TabStack;
                     AddCSharpLine( "}" );
                     AddCSharpLine( "else" );               
                     AddCSharpLine( "{" );
                     ++m_TabStack;

                        AddCSharpLine( "uScriptDebug.Log( \"Possible infinite loop detected in uScript " + m_Script.Name + " at " + logicNode.FriendlyName + ".  " + 
                                       "If this is in error you can change the Maximum Node Recursion in the Preferences Panel and regenerate the script.\", uScriptDebug.Type.Error);" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                  }
                  else
                  {
                     CallRelays(receiver.Guid, eventName.Name);
                  }

               --m_TabStack;

               AddCSharpLine( "}" );
               AddCSharpLine( "" );
            }

            foreach ( Plug input in logicNode.Inputs )
            {
               AddCSharpLine( "void " + CSharpRelay(receiver, input.Name) + "()" );
               AddCSharpLine( "{" );

               ++m_TabStack;

                  if ( true == m_GenerateDebugInfo )
                  {
                     AddCSharpLine( "if ( relayCallCount++ < MaxRelayCallCount )" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;

                        PrintDebug(receiver);                  
                        RelayToLogic((LogicNode)receiver, input.Name);

                     --m_TabStack;
                     AddCSharpLine( "}" );
                     AddCSharpLine( "else" );               
                     AddCSharpLine( "{" );
                     ++m_TabStack;

                        AddCSharpLine( "uScriptDebug.Log( \"Possible infinite loop detected in uScript " + m_Script.Name + " at " + logicNode.FriendlyName + ".  " + 
                                       "If this is in error you can change the Maximum Node Recursion in the Preferences Panel and regenerate the script.\", uScriptDebug.Type.Error);" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                  }
                  else
                  {
                     RelayToLogic((LogicNode)receiver, input.Name);
                  }

               --m_TabStack;

               AddCSharpLine( "}" );
               AddCSharpLine( "" );
            }

            foreach ( string driven in logicNode.Drivens )
            {
               AddCSharpLine( "void " + CSharpRelay(logicNode, driven) + "( )" );
               AddCSharpLine( "{" );
               ++m_TabStack;

                  if ( true == m_GenerateDebugInfo )
                  {
                     AddCSharpLine( "if ( relayCallCount++ < MaxRelayCallCount )" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;

                        DefineDriven( logicNode, driven );

                     --m_TabStack;
                     AddCSharpLine( "}" );
                     AddCSharpLine( "else" );               
                     AddCSharpLine( "{" );
                     ++m_TabStack;

                        AddCSharpLine( "uScriptDebug.Log( \"Possible infinite loop detected in uScript " + m_Script.Name + " at " + logicNode.FriendlyName + ".  " + 
                                       "If this is in error you can change the Maximum Node Recursion in the Preferences Panel and regenerate the script.\", uScriptDebug.Type.Error);" );
                     --m_TabStack;
                     AddCSharpLine( "}" );
                  }
                  else
                  {
                     DefineDriven( logicNode, driven );
                  }

               --m_TabStack;
               AddCSharpLine( "}" );
            }
         }
      }

      private void AddCSharpLine( string CSharpScript )
      {
         for ( int i = 0; i < m_TabStack; i++ )
         {
            m_CSharpString += "   ";
         }

         m_CSharpString += CSharpScript + "\r\n";
      }

      private string PreviousName(EntityNode entityNode)
      {
         return PreviousName(entityNode, "Default");
      }

      private string PreviousName(EntityNode entityNode, string parameterName)
      {
         return CSharpName(entityNode, parameterName) + "_previous";
      }

      private string CSharpName(EntityNode entityNode)
      {
         return CSharpName( entityNode, "Default" );
      }

      //create unique CSharp name based on id, etc.
      private string CSharpName(EntityNode entityNode, string parameterName)
      {
         string name = "";

         int guidId = GetGuidId( entityNode.Guid );

         if ( entityNode is EntityEvent )
         {
            EntityEvent entityEvent = (EntityEvent) entityNode;
            name = "event_" + entityEvent.Instance.Type + "_" + parameterName + "_" + guidId;
         }
         else if ( entityNode is EntityMethod )
         {
            EntityMethod entityMethod = (EntityMethod) entityNode;
            name = "method_" + entityMethod.Input + "_" + entityMethod.Instance.Type + "_" + parameterName + "_" + guidId;
         }
         else if ( entityNode is EntityProperty )
         {
            EntityProperty entityProperty = (EntityProperty) entityNode;
            name = "property_" + entityProperty.Parameter.Name + "_" + entityProperty.Instance + "_" + parameterName + "_" + guidId;
         }
         else if ( entityNode is LocalNode )
         {
            LocalNode local = (LocalNode) entityNode;

            name = "local_" + local.Name.Default + "_" + local.Value.Type;
            name = name.Replace( "[]", "Array" );
         }
         else if ( entityNode is OwnerConnection )
         {
            OwnerConnection owner = (OwnerConnection) entityNode;

            name = "owner_" + owner.Connection.Name + "_" + guidId;
            name = name.Replace( "[]", "Array" );
         }
         else if ( entityNode is ExternalConnection )
         {
            name = "external_" + guidId;
            name = name.Replace( "[]", "Array" );
         }
         else if ( entityNode is LogicNode )
         {
            LogicNode logicNode = (LogicNode) entityNode;
            name = "logic_" + logicNode.Type + "_" + parameterName + "_" + guidId;
         }
         else
         {
            throw new Exception( "CSharp GENERATION ERROR - UNKNOWN TYPE " + entityNode.GetType( ).ToString( ) );
         }

         name = name.Replace( "+", "." );

         return MakeSyntaxSafe( name );
      }

      private string FormatType(string type)
      {
         return type.Replace( "+", "." );
      }

      public static string EscapeString(string s)
      {
         //escape backslashes
         s = s.Replace( "\\", "\\\\" );
         //escape quotes
         s = s.Replace( "\"", "\\\"");
         //newline
         s = s.Replace( "\n", "\\n");
         //carriage return
         s = s.Replace( "\r", "\\r");
      
         return s;
      }

      public static string MakeSyntaxSafe(string s)
      {
	      bool isSafe;
         return MakeSyntaxSafe(s, out isSafe);
      }

	   public static string MakeSyntaxSafe(string s, out bool isSafe)
      {
         string typeSafe = "";
         int count = 0;
         isSafe = true;

         foreach ( char c in s )
         {
            if ( c >= 'A' && c <= 'Z' ||
                 c >= 'a' && c <= 'z' ||
                 c == '_'             ||
               ( c >= '0' && c <= '9' && count > 0 ) )
            {
               typeSafe += c;
            }
            else
            {
               typeSafe += "_";
			      isSafe = false;
            }
				
            count++;
         }
      
         return typeSafe;
      }
      
      //int representation of the guid
      private int GetGuidId( Guid guid )
      {
         if ( false == m_GuidToId.Contains(guid) )
         {
            m_GuidToId[ guid ] = m_GuidToId.Values.Count;
         }

         return (int) m_GuidToId[ guid ];
      }

      //create unique CSharp function names based on entity node information
      private string CSharpRelay(EntityNode receiver, string methodName)
      {
         int guidId = GetGuidId( receiver.Guid );

         string name = "Relay_" + methodName + "_" + guidId;
         name = name.Replace( ' ', '_' );
         name = name.Replace( '-', '_' );

         return name;
      }

      //register event listener function with an entity
      private void AddEventListener( string eventVariable, EntityEvent entityEvent, bool add )
      {
         string operation = add ? " += " : " -= "; 

         if ( true == entityEvent.IsStatic )
         {
            foreach ( Plug output in entityEvent.Outputs )
            {
               AddCSharpLine( entityEvent.ComponentType + "." + output.Name + operation + CSharpEventDeclaration(entityEvent, output.Name) + ";" );            
            }
         }
         else
         {
            //if we're setting up a new event which is not a gui listener
            //or if we're removing the events, see if there is an existing one matching the name first
            if ( entityEvent.ComponentType != "uScript_GUI" )
            {
               AddCSharpLine( entityEvent.ComponentType + " component = " + eventVariable + ".GetComponent<" + entityEvent.ComponentType + ">();" );
               AddMissingComponent( "component", eventVariable, entityEvent.ComponentType ); 
            }
            else
            {
               AddCSharpLine( "if ( null == " + OnGuiListenerName( ) + " )" );
               AddCSharpLine( "{" );
               ++m_TabStack;

                  AddCSharpLine( "//OnGUI need unique listeners so calls like GUI.depth will work across uScripts" );
                  AddCSharpLine( OnGuiListenerName( ) + " = " + eventVariable + ".AddComponent<" + entityEvent.ComponentType + ">();" );
               
               --m_TabStack;
               AddCSharpLine( "}" );

               AddCSharpLine( entityEvent.ComponentType + " component = " + OnGuiListenerName( ) + ";" );
            }
            AddCSharpLine( "if ( null != component )" );
            AddCSharpLine( "{" );
            ++m_TabStack;
            
               foreach ( Plug output in entityEvent.Outputs )
               {
                  AddCSharpLine( "component." + output.Name + operation + CSharpEventDeclaration(entityEvent, output.Name) + ";" );            
               }

            --m_TabStack;
            AddCSharpLine( "}" );
         }
      }

      //register event listener function with an entity
      private void AddLogicEventListener( LogicNode logicNode, string eventName )
      {
         AddCSharpLine( CSharpName(logicNode, logicNode.Type) + "." + eventName + " += "+ CSharpEventDeclaration(logicNode, eventName) + ";" );            
      }

      //unique function name per entity property to get
      private string CSharpRefreshGetPropertyDeclaration(EntityProperty entityProperty)
      {
         return CSharpName(entityProperty, entityProperty.Parameter.Name) + "_Get_Refresh";
      }

      //unique function name per entity property to set
      private string CSharpRefreshSetPropertyDeclaration(EntityProperty entityProperty)
      {
         return CSharpName(entityProperty, entityProperty.Parameter.Name) + "_Set_Refresh";
      }

      private string CSharpSyncUnityHooksDeclaration( )
      {
         return "SyncUnityHooks( )";
      }

      private string CSharpSyncEventListenersDeclaration( )
      {
         return "SyncEventListeners( )";
      }

      private string CSharpExternalDriven(EntityNode node, string name)
      {
         return name + "_" + GetGuidId(node.Guid);
      }

      //we can't query unity base classes for possibly external connection
      //name ocnflicts because unity uses reflection to call and not true base calsses
      //so i have a manual list here of methods which are external inputs should not be called
      private string RemoveReflectionConflicts( string methodName )
      {
         if ( methodName == "OnDestroy" )   return "_" + methodName;
         if ( methodName == "OnDisable" )   return "_" + methodName;
         if ( methodName == "OnEnable" )    return "_" + methodName;
         if ( methodName == "Start" )       return "_" + methodName;
         if ( methodName == "Update" )      return "_" + methodName;
         if ( methodName == "LateUpdate" )  return "_" + methodName;
         if ( methodName == "FixedUpdate" ) return "_" + methodName;
         if ( methodName == "OnGUI" )       return "_" + methodName;
         if ( methodName == "Awake" )       return "_" + methodName;

         return methodName;
      }

      private Plug CSharpExternalInputDeclaration(string defaultName)
      {
         Plug plug;

         plug.FriendlyName = defaultName;
         
         //use friendlyname as external name
         //so the name stays the same even if they reorder the nodes
         //this prevents links from breaking in the parent scripts
         string methodName = MakeSyntaxSafe(plug.FriendlyName);

         //make sure it doesn't conflict with any known unity reflected calls
         methodName = RemoveReflectionConflicts( methodName );

         plug.Name = methodName;

         return plug;
      }

      private Plug CSharpExternalParameterDeclaration(string defaultName)
      {
         Plug plug;

         plug.FriendlyName = defaultName;
         
         //use friendlyname as external name
         //so the name stays the same even if they reorder the nodes
         //this prevents links from breaking in the parent scripts
         plug.Name = MakeSyntaxSafe(plug.FriendlyName);

         return plug;
      }

      private Plug CSharpExternalOutputPropertyDeclaration(string defaultName)
      {
         Plug plug;

         plug.FriendlyName = defaultName;

         //use friendlyname as external name
         //so the name stays the same even if they reorder the nodes
         //this prevents links from breaking in the parent scripts
         plug.Name = MakeSyntaxSafe(plug.FriendlyName);

         return plug;
      }
   
      private string CSharpExternalOutputDeclaration(string defaultName)
      {
         return "output_Link_" + MakeSyntaxSafe(defaultName);
      }

      private Plug CSharpExternalEventDeclaration(string defaultName)
      {
         Plug plug;

         plug.FriendlyName = defaultName;
         //use friendlyname as external name
         //so the name stays the same even if they reorder the nodes
         //this prevents links from breaking in the parent scripts
         plug.Name = MakeSyntaxSafe(plug.FriendlyName);

         return plug;
      }

      //unique function name per entity event to receive
      private string CSharpEventDeclaration(EntityEvent entityEvent, string output)
      {
         return entityEvent.Instance.Name + "_" + output + "_" + GetGuidId(entityEvent.Guid);
      }

      //unique function name per entity event to receive
      private string CSharpEventDeclaration(LogicNode logicNode, string eventName)
      {
         return FormatType(logicNode.Type) + "_" + eventName + "_" + GetGuidId(logicNode.Guid);
      }

      //have any non-triggable nodes (properties, local variables)
      //write themselves to the input parameters for the node passed into this method
      private void SyncSlaveConnections( EntityNode node, Parameter [] parameters )
      {
         AddCSharpLine( "{" );
         ++m_TabStack;

         string currentCode = SetCode( "" );

         bool needsProperties = false;
         bool needsIndex = false;

         foreach ( Parameter parameter in parameters )
         {
            bool needsPropertiesCleared = false;
            bool needsIndexCleared = false;

            string nestedCode = SetCode( "" );

            //get all the links hooked to the input on this node
            LinkNode []links = FindLinksByDestination( node.Guid, parameter.Name );
            if ( links.Length == 0 )
            {
               //no links? then they've specified
               //a default parmaeter so make sure that is hooked up
               SyncReferencedGameObject( node, parameter );
            }

            //if the input parameter is an array
            //we need to place all source node values into the array
            if ( parameter.Type.Contains("[]") )
            {
               foreach ( LinkNode link in links )
               {
                  EntityNode argNode = m_Script.GetNode( link.Source.Guid );
                  
                  //check to see if any source nodes are local variables
                  if ( argNode is LocalNode )
                  {
                     LocalNode localNode = (LocalNode) argNode;
                     SyncReferencedGameObject( argNode, localNode.Value );
                     
                     //if the local variable is an array then we need to copy the array
                     //to the next available index of the input parameter
                     if ( localNode.Value.Type.Contains("[]") )
                     {
                        AddCSharpLine( "properties = " + CSharpName(argNode) + ";" );

                        //make sure our input array is large enough to hold the array we're copying into it
                        AddCSharpLine( "if ( " + CSharpName(node, parameter.Name) + ".Length != index + properties.Length)" );
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                           AddCSharpLine( "System.Array.Resize(ref " + CSharpName(node, parameter.Name) + ", index + properties.Length);" );
                        --m_TabStack;
                        AddCSharpLine( "}" );

                        //copy the source node array into the input parameter array
                        AddCSharpLine( "System.Array.Copy(properties, 0, " + CSharpName(node, parameter.Name) + ", index, properties.Length);" );
                        AddCSharpLine( "index += properties.Length;" );
                        AddCSharpLine( "" );

                        needsProperties = true;
                        needsIndex = true;

                        needsPropertiesCleared = true;
                        needsIndexCleared = true;

                     }
                     else
                     {
                        //make sure our input array is large enough to hold another value
                        AddCSharpLine( "if ( " + CSharpName(node, parameter.Name) + ".Length <= index)" );
                        AddCSharpLine( "{" );
                        ++m_TabStack;
                           AddCSharpLine( "System.Array.Resize(ref " + CSharpName(node, parameter.Name) + ", index + 1);" );
                        --m_TabStack;
                        AddCSharpLine( "}" );

                        //copy the source node value into the input parameter array
                        AddCSharpLine( CSharpName(node, parameter.Name) + "[ index++ ] = " + CSharpName(argNode) + ";" );
                        AddCSharpLine( "" );

                        needsIndex = true;
                        needsIndexCleared = true;
                     }
                  }

                  //check to see if any source nodes are local variables
                  if ( argNode is OwnerConnection )
                  {
                     //make sure our input array is large enough to hold another value
                     AddCSharpLine( "if ( " + CSharpName(node, parameter.Name) + ".Length <= index)" );
                     AddCSharpLine( "{" );
                     ++m_TabStack;
                        AddCSharpLine( "System.Array.Resize(ref " + CSharpName(node, parameter.Name) + ", index + 1);" );
                     --m_TabStack;
                     AddCSharpLine( "}" );

                     //copy the source node value into the input parameter array
                     AddCSharpLine( CSharpName(node, parameter.Name) + "[ index++ ] = " + CSharpName(argNode) + ";" );
                     AddCSharpLine( "" );

                     needsIndex = true;
                     needsIndexCleared = true;
                  }

                  //check to see if any source nodes are property nodes
                  else if ( argNode is EntityProperty )
                  {
                     EntityProperty entityProperty = (EntityProperty) argNode;
                     
                     if ( true == entityProperty.Parameter.Output )
                     {   
                        SyncReferencedGameObject( argNode, entityProperty.Parameter );

                        //if the property variable is an array then we need to copy the array
                        //to the next available index of the input parameter
                        if ( entityProperty.Parameter.Type.Contains("[]") )
                        {
                           AddCSharpLine( "properties = " + CSharpRefreshGetPropertyDeclaration( entityProperty ) + "( );" );

                           //make sure our input array is large enough to hold the array we're copying into it
                           AddCSharpLine( "if ( " + CSharpName(node, parameter.Name) + ".Length != index + properties.Length)" );
                           AddCSharpLine( "{" );
                           ++m_TabStack;
                              AddCSharpLine( "System.Array.Resize(ref " + CSharpName(node, parameter.Name) + ", index + properties.Length);" );
                           --m_TabStack;
                           AddCSharpLine( "}" );

                           AddCSharpLine( "System.Array.Copy(properties, 0, " + CSharpName(node, parameter.Name) + ", index, properties.Length);" );
                           AddCSharpLine( "index += properties.Length;" );
                           AddCSharpLine( "" );

                           needsProperties = true;
                           needsIndex = true;
                           needsPropertiesCleared = true;
                           needsIndexCleared = true;
                        }
                        else
                        {
                           //make sure our input array is large enough to hold another value
                           AddCSharpLine( "if ( " + CSharpName(node, parameter.Name) + ".Length <= index)" );
                           AddCSharpLine( "{" );
                           ++m_TabStack;
                              AddCSharpLine( "System.Array.Resize(ref " + CSharpName(node, parameter.Name) + ", index + 1);" );
                           --m_TabStack;
                           AddCSharpLine( "}" );

                           //copy the source node value into the input parameter array
                           AddCSharpLine( CSharpName(node, parameter.Name) + "[ index++ ] = " + CSharpRefreshGetPropertyDeclaration( entityProperty ) + "( );" );
                           AddCSharpLine( "" );

                           needsIndex = true;
                           needsIndexCleared = true;
                        }
                     }
                  }
               }
            }
            else
            {
               foreach ( LinkNode link in links )
               {
                  EntityNode argNode = m_Script.GetNode( link.Source.Guid );
                  
                  //if any of those links is a local node
                  //we need to write the line for the property to refresh
                  if ( argNode is LocalNode || argNode is OwnerConnection )
                  {
                     if ( argNode is LocalNode )
                     {
                        LocalNode localNode = (LocalNode) argNode;
                        SyncReferencedGameObject( localNode, localNode.Value );
                     }

                     AddCSharpLine( CSharpName(node, parameter.Name) + " = " + CSharpName(argNode) + ";" );
                     AddCSharpLine( "" );
                  }

                  //if any of those links is a property node
                  //we need to write the line for the property to refresh
                  else if ( argNode is EntityProperty )
                  {
                     EntityProperty entityProperty = (EntityProperty) argNode;

                     if ( true == entityProperty.Parameter.Output )
                     {
                        SyncReferencedGameObject( entityProperty, entityProperty.Parameter );

                        AddCSharpLine( CSharpName(node, parameter.Name) + " = " + CSharpRefreshGetPropertyDeclaration( entityProperty ) + "( );" );
                        AddCSharpLine( "" );
                     }
                  }
               }
            }

            string newNestedCode = SetCode( nestedCode );

            if ( newNestedCode != "" )
            {
               if ( true == needsIndexCleared ) AddCSharpLine( "index = 0;" );
               if ( true == needsPropertiesCleared ) AddCSharpLine( "properties = null;" );
            
               m_CSharpString += newNestedCode;
            }
         }

         string newCode = SetCode( currentCode );

         if ( newCode != "" )
         {
            if ( true == needsIndex ) AddCSharpLine( "int index;" );
            if ( true == needsProperties ) AddCSharpLine( "System.Array properties;" );

            m_CSharpString += newCode;
         }

         --m_TabStack;
         AddCSharpLine( "}" );
      }
   
      private void SyncReferencedGameObject( EntityNode node, Parameter parameter )
      {
         string currentCode = SetCode( "" );
         
         ++m_TabStack;
            FillComponent( node, parameter );
         --m_TabStack;

         string newCode = SetCode( currentCode );

         if ( newCode != "" )
         {
            AddCSharpLine( "{" );
            
               m_CSharpString += newCode;

            AddCSharpLine( "}" );
         }
      }

      private string OnGuiListenerName( ) { return "thisScriptsOnGuiListener"; }

      //go through and tell all the property linked to us to update their entity's values
      //because we could have modified the CSharp representation
      private void RefreshSetProperties( EntityNode node, Parameter [] parameters )
      {
         //make sure all components we plan to reference
         //have been placed in their local variables
         foreach ( Parameter parameter in parameters )
         {
            //get all the links which go out from the output on this node
            LinkNode [] links = FindLinksBySource( node.Guid, parameter.Name );
            
            foreach ( LinkNode link in links )
            {
               //if any of those links goes to a property node
               //we need to write the line for the property to refresh
               EntityNode argNode = m_Script.GetNode( link.Destination.Guid );
               
               if ( argNode is EntityProperty )
               {
                  EntityProperty property = (EntityProperty) argNode;

                  if ( true == property.Parameter.Input )
                  {
                     SyncReferencedGameObject( property, property.Parameter );
                     AddCSharpLine( CSharpRefreshSetPropertyDeclaration( property ) + "( );" );
                  }
               }
            }
         }
      }

      //helper function to find links which link to a specific destination point
      private LinkNode []FindLinksByDestination(Guid destination, string name)
      {
         List<LinkNode> links = new List<LinkNode>( );

         foreach ( LinkNode link in m_Script.Links )
         {
            if ( link.Destination.Guid   == destination &&
                 link.Destination.Anchor == name )
            {
               links.Add( link );
            }
         }

         return links.ToArray( );
      }

      //helper function to find links which link to a specific source point
      private LinkNode[] FindLinksBySource(Guid source, string name)
      {
         List<LinkNode> links = new List<LinkNode>( );

         foreach ( LinkNode link in m_Script.Links )
         {
            if ( link.Source.Guid   == source &&
                 link.Source.Anchor == name )
            {
               links.Add( link );
            }
         }

         return links.ToArray( );
      }

      private void PrintDebug(EntityNode node)
      {
         if ( true == m_GenerateDebugInfo )
         {
            if ( "true" == node.ShowComment.Default )
            {
               AddCSharpLine( "uScriptDebug.Log( \"[" + uScriptConfig.Variable.FriendlyName(node.GetType().ToString()) + "] " + EscapeString(node.Comment.Default) + "\", uScriptDebug.Type.Message);" );
            }
         }
      }
   }
}
